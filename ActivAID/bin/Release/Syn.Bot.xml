<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syn.Bot</name>
    </assembly>
    <members>
        <member name="T:Syn.EmotionML.ActionTendency">
            <summary>
            A class that describes an emotion or a related state according to an emotion action tendency vocabulary.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.ActionTendency.ActionTendencyFrijda">
            <summary>
            Gets Frijda's action tendencies vocabulary URI
            </summary>
        </member>
        <member name="M:Syn.EmotionML.ActionTendency.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Syn.EmotionML.ActionTendency"/>
            </summary>
            <param name="name">The name of the action tendency.</param>
        </member>
        <member name="M:Syn.EmotionML.ActionTendency.#ctor(System.String,System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.ActionTendency"/> class.
            </summary>
            <param name="name">The name of the action tendency.</param>
            <param name="value">The static scale value which must be a floating point value from the closed interval [0, 1].</param>
        </member>
        <member name="M:Syn.EmotionML.ActionTendency.#ctor(System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.ActionTendency"/> class.
            </summary>
            <param name="name">The name of the action tendency.</param>
            <param name="value">The static scale value which must be a floating point value from the closed interval [0, 1].</param>
            <param name="confidence">The annotator's confidence that the annotation given for this action tendency is correct.</param>
        </member>
        <member name="T:Syn.EmotionML.Appraisal">
            <summary>
            A class that describes an emotion or a related state according to an emotion appraisal vocabulary.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Appraisal.AppraisalEma">
            <summary>
            Gets the EMA appraisals vocabulary URI
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Appraisal.AppraisalOcc">
            <summary>
            Gets the OCC appraisals vocabulary URI
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Appraisal.AppraisalScherer">
            <summary>
            Gets the Scherer's appraisals vocabulary URI
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Appraisal.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.Appraisal"/> class.
            </summary>
            <param name="name">The name of the appraisal, which must be contained in the declared appraisal vocabulary.</param>
        </member>
        <member name="M:Syn.EmotionML.Appraisal.#ctor(System.String,System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.Appraisal"/> class.
            </summary>
            <param name="name">The name of the appraisal, which must be contained in the declared appraisal vocabulary.</param>
            <param name="value">The static scale value which must be a floating point value from the closed interval [0, 1].</param>
        </member>
        <member name="M:Syn.EmotionML.Appraisal.#ctor(System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.Appraisal"/> class.
            </summary>
            <param name="name">The name of the appraisal, which must be contained in the declared appraisal vocabulary.</param>
            <param name="value">The static scale value which must be a floating point value from the closed interval [0, 1].</param>
            <param name="confidence">The degree of confidence or probability that the emotion representation carrying this attribute is correct.</param>
        </member>
        <member name="T:Syn.EmotionML.Category">
            <summary>
            A class that describes an emotion or a related state using a category.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Category.CategoryBig6">
            <summary>
            Gets the Ekman's "big six" basic emotions vocabulary URI
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Category.CategoryEveryday">
            <summary>
            Gets the Everyday emotion vocabulary URI
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Category.CategoryOcc">
            <summary>
            Gets the OCC categories vocabulary URI 
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Category.CategoryFsre">
            <summary>
            Gets the FSRE categories vocabulary URI 
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Category.CategoryFrijda">
            <summary>
            Gets the Frijda's categories vocabulary URI
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Category.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.Category"/> class.
            </summary>
            <param name="name">The name of the category, which must be contained in the declared category vocabulary.</param>
        </member>
        <member name="M:Syn.EmotionML.Category.#ctor(System.String,System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.Category"/> class.
            </summary>
            <param name="name">The name of the category, which must be contained in the declared category vocabulary.</param>
            <param name="value">The static scale value which must be a floating point value from the closed interval [0, 1].</param>
        </member>
        <member name="M:Syn.EmotionML.Category.#ctor(System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.Category"/> class.
            </summary>
            <param name="name">The name of the category, which must be contained in the declared category vocabulary.</param>
            <param name="value">The static scale value which must be a floating point value from the closed interval [0, 1].</param>
            <param name="confidence">The degree of confidence or probability that the emotion representation carrying this attribute is correct.</param>
        </member>
        <member name="T:Syn.EmotionML.Dimension">
            <summary>
            A class that describes an emotion or a related state according to an emotion dimension vocabulary.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Dimension.DimensionPad">
            <summary>
            Gets the Mehrabian's PAD dimensions URI
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Dimension.DimensionFsre">
            <summary>
            Gets the FSRE dimensions URI
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Dimension.DimensionIntensity">
            <summary>
            Gets the intensity dimension URI
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Dimension.Value">
            <summary>
            Gets or sets a static scale value which must be a floating point value from the closed interval [0, 1].
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Dimension.Trace">
            <summary>
            Gets or sets a value that represents the time evolution of a dynamic scale value.
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Dimension.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.Dimension"/> class.
            </summary>
            <param name="name">The name of the dimension, which must be contained in the declared dimension vocabulary.</param>
        </member>
        <member name="M:Syn.EmotionML.Dimension.#ctor(System.String,System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.Dimension"/> class.
            </summary>
            <param name="name">The name of the dimension, which must be contained in the declared dimension vocabulary.</param>
            <param name="value">The static scale value which must be a floating point value from the closed interval [0, 1].</param>
        </member>
        <member name="M:Syn.EmotionML.Dimension.#ctor(System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.Dimension"/> class.
            </summary>
            <param name="name">The name of the dimension, which must be contained in the declared dimension vocabulary.</param>
            <param name="value">The static scale value which must be a floating point value from the closed interval [0, 1].</param>
            <param name="confidence">The degree of confidence or probability that the emotion representation carrying this attribute is correct.</param>
        </member>
        <member name="T:Syn.EmotionML.Emotion">
            <summary>
            A class that represents a single emotion annotation.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.ExpressedThroughFace">
            <summary>
            Gets the modality which denotes that the emotion is expressed through face.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.ExpressedThroughGaze">
            <summary>
            Gets the modality which denotes that the emotion is expressed through gaze.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.ExpressedThroughGesture">
            <summary>
            Gets the modality which denotes that the emotion is expressed through gesture.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.ExpressedThroughHead">
            <summary>
            Gets the modality which denotes that the emotion is expressed through head.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.ExpressedThroughLeg">
            <summary>
            Gets the modality which denotes that the emotion is expressed through leg.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.ExpressedThroughLocomotion">
            <summary>
            Gets the modality which denotes that the emotion is expressed through locomotion.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.ExpressedThroughText">
            <summary>
            Gets the modality which denotes that the emotion is expressed through text.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.ExpressedThroughPhysiology">
            <summary>
            Gets the modality which denotes that the emotion is expressed through physiology.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.ExpressedThroughPosture">
            <summary>
            Gets the modality which denotes that the emotion is expressed through posture.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.ExpressedThroughTorso">
            <summary>
            Gets the modality which denotes that the emotion is expressed through torso.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.ExpressedThroughVoice">
            <summary>
            Gets the modality which denotes that the emotion is expressed through voice.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.ExpressedThroughCamera">
            <summary>
            Gets the modality which denotes that the emotion is expressed through camera.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.ExpressedThroughFacialSkinColor">
            <summary>
            Gets the modality which denotes that the emotion is expressed through facial skin color.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.ExpressedThroughMicrophone">
            <summary>
            Gets the modality which denotes that the emotion is expressed through microphone.
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Emotion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.Emotion"/> class.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.Info">
            <summary>
            Gets or sets the <see cref="P:Syn.EmotionML.Emotion.Info"/> used to annotate arbitrary metadata..
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.Categories">
            <summary>
            Gets or sets the categories used to describe this <see cref="T:Syn.EmotionML.Emotion"/> or a related state using a category.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.Dimensions">
            <summary>
            Gets or sets the dimensions that describe this <see cref="T:Syn.EmotionML.Emotion"/> or a related state according to an emotion dimension vocabulary.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.Appraisals">
            <summary>
            Gets or sets the appraisals that describe this <see cref="T:Syn.EmotionML.Emotion"/> or a related state according to an emotion appraisal vocabulary.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.ActionTendencies">
            <summary>
            Gets or sets the action tendencies that describe this <see cref="T:Syn.EmotionML.Emotion"/> or a related state according to an emotion action tendency vocabulary.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.ID">
            <summary>
            Gets or sets the unique identifier for the emotion
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Syn.EmotionML.Emotion.Version">
            <summary>
            Gets or sets the version which indicates the version of the specification to be used for the <see cref="T:Syn.EmotionML.Emotion"/> and its descendants.
            </summary>
            <value>
            The specification version.
            </value>
        </member>
        <member name="P:Syn.EmotionML.Emotion.References">
            <summary>
            Gets a list of references that relate this <see cref="T:Syn.EmotionML.Emotion"/> annotation to the "rest of the world".
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.ExpressedThrough">
            <summary>
            Gets or sets the modality, or list of modalities, through which the emotion is expressed. 
            An attribute of type xsd:NMTOKENS which contains a space delimited set of values from an open set of values including: {gaze, face, head, torso, gesture, leg, voice, text, locomotion, posture, physiology, ...}.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.Start">
            <summary>
            Gets or sets a value which denotes the starting and ending absolute times. 
            The value must be of type xsd:nonNegativeInteger and should indicate the number of milliseconds since 1 January 1970 00:00:00 GMT.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.End">
            <summary>
            Gets or sets a value which denotes the starting and ending absolute times. 
            The value must be of type xsd:nonNegativeInteger and should indicate the number of milliseconds since 1 January 1970 00:00:00 GMT.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.Duration">
            <summary>
            Gets or sets a value defaulting to zero which specifies the duration of the event in milliseconds.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.TimeRefUri">
            <summary>
            Gets or sets a value which indicates the URI used to anchor the relative timestamp.
            </summary>
            <value>
            The time reference URI.
            </value>
        </member>
        <member name="P:Syn.EmotionML.Emotion.TimeRefAnchorPoint">
            <summary>
            Gets or sets a value which indicates whether to measure the time from the start or end of the interval designated with <see cref="P:Syn.EmotionML.Emotion.TimeRefUri"/>.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.OffsetToStart">
            <summary>
            Gets or sets the offset in milliseconds for the start of input from the anchor point designated with <see cref="P:Syn.EmotionML.Emotion.TimeRefUri"/> and <see cref="P:Syn.EmotionML.Emotion.TimeRefAnchorPoint"/>.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Emotion.PlainText">
            <summary>
            Gets or sets an arbitrary text value.
            </summary>
            <value>
            The plain text.
            </value>
        </member>
        <member name="M:Syn.EmotionML.Emotion.AddCategory(Syn.EmotionML.Category)">
            <summary>
            Adds a <see cref="T:Syn.EmotionML.Category"/> to this <see cref="T:Syn.EmotionML.Emotion"/>.
            </summary>
            <param name="newCategory">The category to add.</param>
        </member>
        <member name="M:Syn.EmotionML.Emotion.RemoveCategory(System.String)">
            <summary>
            Removes a <see cref="T:Syn.EmotionML.Category"/> by name.
            </summary>
            <param name="categoryName">The name of the category to remove</param>
        </member>
        <member name="M:Syn.EmotionML.Emotion.AddDimension(Syn.EmotionML.Dimension)">
            <summary>
            Adds a <see cref="T:Syn.EmotionML.Dimension"/> to this <see cref="T:Syn.EmotionML.Emotion"/>.
            </summary>
            <param name="newDimension">The <see cref="T:Syn.EmotionML.Dimension"/> to add.</param>
        </member>
        <member name="M:Syn.EmotionML.Emotion.RemoveDimension(System.String)">
            <summary>
            Removes a <see cref="T:Syn.EmotionML.Dimension"/> by name.
            </summary>
            <param name="dimensionName">The name of the dimension to remove</param>
        </member>
        <member name="M:Syn.EmotionML.Emotion.AddAppraisal(Syn.EmotionML.Appraisal)">
            <summary>
            Adds an <see cref="T:Syn.EmotionML.Appraisal"/> to this <see cref="T:Syn.EmotionML.Emotion"/>.
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Emotion.RemoveAppraisal(System.String)">
            <summary>
            Removes an <see cref="T:Syn.EmotionML.Appraisal"/> by name.
            </summary>
            <param name="appraisalName">The name of the appraisal to remove.</param>
        </member>
        <member name="M:Syn.EmotionML.Emotion.AddActionTendency(Syn.EmotionML.ActionTendency)">
            <summary>
            Adds an <see cref="T:Syn.EmotionML.ActionTendency"/> to this <see cref="T:Syn.EmotionML.Emotion"/>.
            </summary>
            <param name="newActionTendency">The <see cref="T:Syn.EmotionML.ActionTendency"/> to add.</param>
        </member>
        <member name="M:Syn.EmotionML.Emotion.RemoveActionTendency(System.String)">
            <summary>
            Removes an <see cref="T:Syn.EmotionML.ActionTendency"/> by name
            </summary>
            <param name="actionTendencyName">The name of the <see cref="T:Syn.EmotionML.ActionTendency"/> to remove.</param>
        </member>
        <member name="M:Syn.EmotionML.Emotion.AddReference(Syn.EmotionML.Reference)">
            <summary>
            Adds a reference URI to this <see cref="T:Syn.EmotionML.Emotion"/> annotation.
            </summary>
            <param name="newReference">The reference URI to add.</param>
        </member>
        <member name="M:Syn.EmotionML.Emotion.RemoveReference(Syn.EmotionML.Reference)">
            <summary>
            Removes a reference by its value.
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Emotion.MergeWith(Syn.EmotionML.Emotion)">
            <summary>
            Merges this emotion with the specified emotion annnotation.
            </summary>
            <param name="mergingEmotion">The <see cref="T:Syn.EmotionML.Emotion"/> to merge with.</param>
        </member>
        <member name="M:Syn.EmotionML.Emotion.GetElement">
            <summary>
            Gets an <see cref="T:System.Xml.Linq.XElement"/> that represents this <see cref="T:Syn.EmotionML.Emotion"/>.
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Emotion.Parse(Syn.EmotionML.EmotionMLDocument,System.Xml.Linq.XElement)">
            <summary>
            Loads an <see cref="T:Syn.EmotionML.Emotion"/> from the specified <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
        </member>
        <member name="T:Syn.EmotionML.EmotionMLDocument">
            <summary>
            A class that represents the root element of an EmotionML document.
            </summary>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.EmotionMLDocument"/> class.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLDocument.Info">
            <summary>
            Gets or sets the <see cref="P:Syn.EmotionML.EmotionMLDocument.Info"/> element used to annotate arbitrary metadata..
            </summary>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLDocument.Vocabularies">
            <summary>
            Gets or sets list of  vocabularies that contain the definition of individual <see cref="T:Syn.EmotionML.Emotion"/> vocabulary.
            </summary>
            <value>
            The vocabularies.
            </value>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLDocument.Emotions">
            <summary>
            Gets or sets the list of all the emotions that represents a individual emotion annotation.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLDocument.CategorySet">
            <summary>
            category set for categories
            </summary>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLDocument.DimensionSet">
            <summary>
            dimension set for dimensions
            </summary>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLDocument.AppraisalSet">
            <summary>
            Gets or sets the appraisal set.
            </summary>
            <value>
            The appraisal set.
            </value>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLDocument.ActionTendencySet">
            <summary>
            Gets or sets the action tendency set for action tendencies
            </summary>
            <value>
            The action tendency set.
            </value>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLDocument.Version">
            <summary>
            Gets the version of EmotionML specification.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLDocument.PlainText">
            <summary>
            Gets or sets an arbitrary plain text value.
            </summary>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLDocument.GetEmotionById(System.String)">
            <summary>
            Gets an <see cref="T:Syn.EmotionML.Emotion"/> by identifier.
            </summary>
            <param name="id">The emotion identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLDocument.ContainsEmotion(System.String)">
            <summary>
            Determines whether an emotion with the specified ID exists.
            </summary>
            <param name="id">The emotion identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLDocument.AddVocabulary(Syn.EmotionML.Vocabulary)">
            <summary>
            Adds a vocabulary to this <see cref="T:Syn.EmotionML.EmotionMLDocument"/>.
            </summary>
            <param name="vocabulary">The Vocabulary to add.</param>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLDocument.AddEmotion(Syn.EmotionML.Emotion)">
            <summary>
            Adds an <see cref="T:Syn.EmotionML.Emotion"/> to this <see cref="T:Syn.EmotionML.EmotionMLDocument"/>.
            </summary>
            <param name="emotion">The Emotion to add.</param>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLDocument.GetDocument">
            <summary>
            Gets an <see cref="T:System.Xml.Linq.XDocument"/> that represents this <see cref="T:Syn.EmotionML.EmotionMLDocument"/> object.
            </summary>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLDocument.Parse(System.Xml.Linq.XDocument)">
            <summary>
            Loads an <see cref="T:Syn.EmotionML.EmotionMLDocument"/> from the specified <see cref="T:System.Xml.Linq.XDocument"/>.
            </summary>
            <param name="emotionMLDocument">The EmotionML document.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLDocument.Parse(System.String)">
            <summary>
            Loads an <see cref="T:Syn.EmotionML.EmotionMLDocument"/> by parsing the specified <see cref="T:System.String"/>.
            </summary>
            <param name="emotionML">The EmotionML document string.</param>
        </member>
        <member name="T:Syn.EmotionML.EmotionMLException">
            <summary>
            Represents errors that occur when an EmotionML element is parsed.
            </summary>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.EmotionMLException"/> class.
            </summary>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.EmotionMLException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.EmotionMLException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Syn.EmotionML.EmotionMLSpecification">
            <summary>
            A class that holds static EmotionML constants.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLSpecification.KnownTags">
            <summary>
            Gets a list of all the known EmotionML tags.
            </summary>
            <value>
            The known tags.
            </value>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLSpecification.Namespace">
            <summary>
            Gets the namespace for EmotionML 1.0 specification.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLSpecification.Prefix">
            <summary>
            Gets the recommented XML-prefix of EmotionML
            </summary>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLSpecification.MimeType">
            <summary>
            Gets the MIME type of EmotionML
            </summary>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLSpecification.FileExtension">
            <summary>
            Gets the File-extension of EmotionML
            </summary>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLSpecification.Version">
            <summary>
            Gets the version of highest EmotionML-Recommendation
            </summary>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLSpecification.Versions">
            <summary>
            Gets all known EmotionML versions.
            </summary>
        </member>
        <member name="T:Syn.EmotionML.EmotionRelatedState">
            <summary>
            An abstract class for the broad range of phenomena intended to be covered by EmotionML specification.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.EmotionRelatedState.Name">
            <summary>
            Gets or sets a value which describes and or defines an <see cref="T:Syn.EmotionML.Emotion"/> or an emotion related state.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.EmotionRelatedState.Value">
            <summary>
            Gets or sets a value which represents a static scale value of the enclosing element.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.EmotionRelatedState.Confidence">
            <summary>
            Gets or sets a value which indicates the degree of confidence or probability that the emotion representation carrying this attribute is correct. 
            </summary>
        </member>
        <member name="P:Syn.EmotionML.EmotionRelatedState.Trace">
            <summary>
            Gets or sets the Trace value which represents the time evolution of a dynamic scale value.
            </summary>
        </member>
        <member name="T:Syn.EmotionML.Info">
            <summary>
            A class used to annotate arbitrary metadata.
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Info.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.Info"/> class.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Info.Element">
            <summary>
            Gets or sets the <see cref="T:Syn.EmotionML.Info"/> element node.
            </summary>
            <value>
            The <see cref="T:Syn.EmotionML.Info"/> element node.
            </value>
        </member>
        <member name="P:Syn.EmotionML.Info.ID">
            <summary>
            Gets or sets the unique identifier for this <see cref="T:Syn.EmotionML.Info"/> element.
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Info.Parse(System.Xml.Linq.XElement)">
            <summary>
            Loads an <see cref="T:Syn.EmotionML.Info"/> from the specified <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
        </member>
        <member name="T:Syn.EmotionML.Item">
            <summary>
            Represents the definition of one vocabulary item, associated with a value which can be used in the "name" attribute of <see cref="T:Syn.EmotionML.Category"/>, <see cref="T:Syn.EmotionML.Dimension"/>, <see cref="T:Syn.EmotionML.Appraisal"/> or <see cref="T:Syn.EmotionML.ActionTendency"/>. 
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Item.Name">
            <summary>
            Gets or sets the name for the <see cref="T:Syn.EmotionML.Item"/>, used to refer to this <see cref="T:Syn.EmotionML.Item"/>.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Item.Info">
            <summary>
            Gets or sets the <see cref="P:Syn.EmotionML.Item.Info"/> element used to annotate arbitrary metadata..
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Item.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.Item"/> class.
            </summary>
            <param name="name">The name of the <see cref="T:Syn.EmotionML.Item"/>.</param>
        </member>
        <member name="M:Syn.EmotionML.Item.GetElement">
            <summary>
            Gets an <see cref="T:System.Xml.Linq.XElement"/> that represents this <see cref="T:Syn.EmotionML.Item"/>.
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Item.Parse(System.Xml.Linq.XElement)">
            <summary>
            Loads an <see cref="T:Syn.EmotionML.Item"/> from the specified <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
        </member>
        <member name="T:Syn.EmotionML.Reference">
            <summary>
            Reference used to relate the emotion annotation to the "rest of the world", more specifically to the emotional expression, the experiencing subject, the trigger, and the target of the emotion.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Reference.ExpressedBy">
            <summary>
            Gets a value that indicates that the reference points to observable behavior expressing the emotion.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Reference.ExperiencedBy">
            <summary>
            Gets a value that indicates that the reference points to the subject experiencing the emotion.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Reference.TriggeredBy">
            <summary>
            Gets a value that indicates that the reference points to an emotion-eliciting event that caused an emotion and/or related appraisals.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Reference.TargetedAt">
            <summary>
            Gets a value that indicates that the reference points to an object towards which an emotion-related action, or action tendency, is directed.
            </summary>
            <value>
            The targeted by.
            </value>
        </member>
        <member name="M:Syn.EmotionML.Reference.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.Reference"/> class.
            </summary>
            <param name="uri">The URI identifying the actual reference target.</param>
        </member>
        <member name="P:Syn.EmotionML.Reference.Uri">
            <summary>
            Gets or sets the URI identifying the actual reference target.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Reference.Role">
            <summary>
            Gets or sets the type of relation between the emotion and the external item referred to. The value must be one of <see cref="P:Syn.EmotionML.Reference.ExpressedBy"/> (default), <see cref="P:Syn.EmotionML.Reference.ExperiencedBy"/>, <see cref="P:Syn.EmotionML.Reference.TriggeredBy"/>, <see cref="P:Syn.EmotionML.Reference.TargetedAt"/>.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Reference.MediaType">
            <summary>
            Gets or sets a value of type xsd:string holding the MIME type of the data that the <see cref="P:Syn.EmotionML.Reference.Uri"/> attribute points to.
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Reference.GetElement">
            <summary>
            Gets an <see cref="T:System.Xml.Linq.XElement"/> that represent this <see cref="T:Syn.EmotionML.Reference"/>.
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Reference.Parse(System.Xml.Linq.XElement)">
            <summary>
            Loads a <see cref="T:Syn.EmotionML.Reference"/> from the specified <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
        </member>
        <member name="T:Syn.EmotionML.Trace">
            <summary>
            Represents the time evolution of a dynamic scale value.
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Trace.#ctor(System.Double,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.Trace"/> class.
            </summary>
            <param name="frequency">The frequency.</param>
            <param name="samples">The samples.</param>
        </member>
        <member name="M:Syn.EmotionML.Trace.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.Trace"/> class.
            </summary>
            <param name="frequencyString">The frequency as string.</param>
            <param name="samples">The samples.</param>
        </member>
        <member name="P:Syn.EmotionML.Trace.Frequency">
            <summary>
            Gets or sets the frequency.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Trace.Samples">
            <summary>
            Gets or sets the samples.
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Trace.SetFrequency(System.String)">
            <summary>
            Set frequency by frequency-string (within Hz)
            </summary>
            <param name="frequencyValue">frequency string</param>
        </member>
        <member name="M:Syn.EmotionML.Trace.FrequencyText">
            <summary>
            Gets the frequency as string with Hz
            </summary>
            <returns>Frequency string (with Hz)</returns>
        </member>
        <member name="M:Syn.EmotionML.Trace.GetElement">
            <summary>
            Gets an <see cref="T:System.Xml.Linq.XElement"/> that represents this <see cref="T:Syn.EmotionML.Trace"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syn.EmotionML.Trace.Parse(System.Xml.Linq.XElement)">
            <summary>
            Loads a <see cref="T:Syn.EmotionML.Trace"/> object from the specified <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="element">The trace element.</param>
        </member>
        <member name="T:Syn.EmotionML.Vocabulary">
            <summary>
            Encapsulates the definition of an <see cref="T:Syn.EmotionML.Emotion"/> vocabulary.
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Vocabulary.#ctor(System.String,System.String,Syn.EmotionML.Item)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.EmotionML.Vocabulary"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="id">The identifier.</param>
            <param name="item">The item.</param>
        </member>
        <member name="P:Syn.EmotionML.Vocabulary.ID">
            <summary>
            Gets or sets a unique vocabulary identifier of type xsd:ID. 
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Vocabulary.Type">
            <summary>
            Gets or sets a value that explicitly indicates whether the vocabulary represents category names, dimension elements, appraisal elements or action tendency elements. 
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Vocabulary.Info">
            <summary>
            Gets or sets the <see cref="P:Syn.EmotionML.Vocabulary.Info"/> element that provides an arbitrary metadata about this <see cref="T:Syn.EmotionML.Vocabulary"/>.
            </summary>
        </member>
        <member name="P:Syn.EmotionML.Vocabulary.Items">
            <summary>
            Gets the list of <see cref="T:Syn.EmotionML.Item"/> elements that represent the definition of this <see cref="T:Syn.EmotionML.Vocabulary"/> item, associated with a value which can be used in the "name" attribute of <see cref="T:Syn.EmotionML.Category"/>, <see cref="T:Syn.EmotionML.Dimension"/>, <see cref="T:Syn.EmotionML.Appraisal"/> or <see cref="T:Syn.EmotionML.ActionTendency"/>.
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Vocabulary.AddItem(Syn.EmotionML.Item)">
            <summary>
            Adds an item to this vocabulary.
            </summary>
            <param name="newItem"></param>
        </member>
        <member name="M:Syn.EmotionML.Vocabulary.RemoveItem(Syn.EmotionML.Item)">
            <summary>
            Removes item from this vocabulary.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Syn.EmotionML.Vocabulary.GetElement">
            <summary>
            Gets an <see cref="T:System.Xml.Linq.XElement"/> that represents this <see cref="T:Syn.EmotionML.Vocabulary"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syn.EmotionML.Vocabulary.Parse(System.Xml.Linq.XElement)">
            <summary>
            Loads a <see cref="T:Syn.EmotionML.Vocabulary"/> object from the specified <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="T:Syn.Bot.Utilities.LicenseActivationException">
            <summary>
             The exception that is thrown when license activation fails.
            </summary>
        </member>
        <member name="M:Syn.Bot.Utilities.LicenseActivationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Utilities.LicenseActivationException"/> class.
            </summary>
        </member>
        <member name="T:Syn.Bot.Utilities.LicenseTypeException">
            <summary>
             The exception that is thrown when requested feature in unavailable in the current license type.
            </summary>
        </member>
        <member name="M:Syn.Bot.Utilities.LicenseTypeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Utilities.LicenseTypeException"/> class.
            </summary>
        </member>
        <member name="F:Syn.Bot.Utilities.LicenseType.Personal">
            <summary>
            Personal-Use only.
            </summary>
        </member>
        <member name="F:Syn.Bot.Utilities.LicenseType.OpenSource">
            <summary>
            Open-Source project.
            </summary>
        </member>
        <member name="F:Syn.Bot.Utilities.LicenseType.IndividualDeveloper">
            <summary>
            Individual Developer.
            </summary>
        </member>
        <member name="F:Syn.Bot.Utilities.LicenseType.Enterprise">
            <summary>
            Companies and Corporations.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.Attributes.EntityAttribute">
            <summary>
            Represents an Entity.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Syn.Bot.Oscova.Attributes.EntityAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Attributes.EntityAttribute"/> class.
            </summary>
            <param name="type">The entity type.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.Attributes.EntityAttribute.Type">
            <summary>
            Gets the entity type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="T:Syn.Bot.Oscova.Attributes.ExpressionAttribute">
            <summary>
            Represents a user input expression.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Attributes.ExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Attributes.ExpressionAttribute"/> class.
            </summary>
            <param name="expression">The user input expression.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Attributes.ExpressionAttribute.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Attributes.ExpressionAttribute"/> class.
            </summary>
            <param name="expression">The user input expression.</param>
            <param name="entityTypes">The entity types.</param>
        </member>
        <member name="T:Syn.Bot.Oscova.Attributes.ContextAttribute">
            <summary>
            Represents a user session conversation context.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Syn.Bot.Oscova.Attributes.ContextAttribute.Name">
            <summary>
            Gets the context name.
            </summary>
            <value>
            The context name.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Attributes.ContextAttribute.Lifespan">
            <summary>
            Gets the lifespan.
            </summary>
            <value>
            The lifespan.
            </value>
        </member>
        <member name="T:Syn.Bot.Oscova.Attributes.PromptAttribute">
            <summary>
            Represents a Prompt message that is returned when the specified entity is missing.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Syn.Bot.Oscova.BotConfiguration">
            <summary>
            Represents the Bot configuration used by various components.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.BotConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.BotConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.MaxMachineLearningLoss">
            <summary>
            Gets or sets the maximum machine learning loss.
            </summary>
            <value>
            The maximum machine learning loss.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.Scoring">
            <summary>
            Gets the scoring configuration.
            </summary>
            <value>
            The scoring configuration
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.RequiredRecognizersOnly">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Syn.Bot.Oscova.OscovaBot"/> should load only required entity recognizers.
            </summary>
            <value>
              <c>true</c> if required parsers only; otherwise, <c>false</c>.
            </value>
            <remarks>Default is <c>false</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.MaxIntentCount">
            <summary>
            Gets or sets the maximum number of intents to return after evaluation.
            </summary>
            <value>
            The maximum intent count.
            </value>
            <remarks>Default is <c>5</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.ProcessingMode">
            <summary>
            Gets or sets the processing mode.
            </summary>
            <value>
            The processing mode.
            </value>
            <remarks>Default is <c>Rule</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.ContextLifespan">
            <summary>
            Gets or sets the default context request lifespan.
            </summary>
            <value>
            The context request lifespan.
            </value>
            <remarks>A <see cref="T:Syn.Bot.Oscova.ContextItem"/> is removed after being idle for the specified lifespan.</remarks>
            <remarks>Default is <c>5</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.MachineLearningRate">
            <summary>
            Gets or sets the machine learning rate.
            </summary>
            <value>
            The machine learning rate.
            </value>
            <remarks>Default is <c>0.25</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.ShowIntentInterpretation">
            <summary>
            Gets or sets a value indicating whether intent interpretation must be serialized.
            </summary>
            <value>
            <c>true</c> if intent interpretation must be serialized; otherwise, <c>false</c>.
            </value>
            <remarks>Defautl is <c>false</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.UseFullIntentName">
            <summary>
            Gets or sets a value indicating whether to use full intent name.
            </summary>
            <value>
              <c>true</c> if use full intent name; otherwise, <c>false</c>.
            </value>
            <remarks>
            A full intent name combines the dialog class name and intent method name.
            Default is <c>true</c>
            </remarks>
        </member>
        <member name="T:Syn.Bot.Oscova.BotUser">
            <summary>
            Represents an Oscova user.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.BotUser.ID">
            <summary>
            Gets the user ID.
            </summary>
            <value>
            The user identifier.
            </value>
        </member>
        <member name="M:Syn.Bot.Oscova.BotUser.CreateRequest">
            <summary>
            Creates a new user request.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.BotUser.CreateRequest(System.String)">
            <summary>
            Creates a new user request.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.BotUser.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="E:Syn.Bot.Oscova.BotUser.ResponseReceived">
            <summary>
            Occurs when a <see cref="T:Syn.Bot.Oscova.Response"/> received by this <see cref="T:Syn.Bot.Oscova.BotUser"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Collection.EntryCollection.OrderByEntryLength">
            <summary>
            Orders the collection based on the length of item values.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Collection.EntryCollection.AddSynonyms(System.String,System.String[])">
            <summary>
            Adds the synonyms as entries with <paramref name="item"/> as the <see cref="P:Syn.Bot.Oscova.Collection.Entry.Reference"/>.
            </summary>
            <param name="item">The item.</param>
            <param name="synonymsList">The synonyms list.</param>
            <remarks><paramref name="item"/>is not added as an entry.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.Collection.DialogCollection.HasDefault">
            <summary>
            Gets a value indicating whether this collection contains Default Intent.
            </summary>
            <value>
            <c>true</c> if this collection has Default Intent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syn.Bot.Oscova.Collection.RecognizerCollection.RegisterType``1(System.String)">
            <summary>
            Registers a <see cref="T:Syn.Bot.Oscova.Interfaces.IEntityRecognizer"/> type. An instance of which is created only when necessary.
            </summary>
            <typeparam name="T"><see cref="T:Syn.Bot.Oscova.Interfaces.IEntityRecognizer"/> type.</typeparam>
            <param name="entityType">Type of the entity.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Collection.RecognizerCollection.LoadType(System.String)">
            <summary>
            Loads a previously registered <see cref="T:Syn.Bot.Oscova.Interfaces.IEntityRecognizer"/> for the specified entity type.
            </summary>
            <param name="entityType">Type of the entity.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Collection.RecognizerCollection.IsCompositeType(System.String)">
            <summary>
            Determines whether the specified entity type is composite.
            </summary>
            <param name="typeName">Name of the entity type.</param>
            <returns>
              <c>true</c> if entity type is composite; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Collection.RecognizerCollection.ExtractEntities(Syn.Bot.Oscova.Request)">
            <summary>
            Extracts known entities from <see cref="T:Syn.Bot.Oscova.Request"/>.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="E:Syn.Bot.Oscova.Collection.RecognizerCollection.EntityCreated">
            <summary>
            Occurs when an entity is created by <see cref="T:Syn.Bot.Oscova.Interfaces.IEntityRecognizer"/>.
            </summary>
        </member>
        <member name="E:Syn.Bot.Oscova.Collection.RecognizerCollection.CompositeEntityCreated">
            <summary>
            Occurs when a composite entity is created.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Collection.Word.Frequency">
            <summary>
            Gets the word occurance frequency. 
            </summary>
            <value>
            The frequency.
            </value>
        </member>
        <member name="T:Syn.Bot.Oscova.ContextParameter">
            <summary>
            Represents a <see cref="T:Syn.Bot.Oscova.ContextItem"/> parameter.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.ContextParameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.ContextParameter.Value">
            <summary>
            Gets the parameter value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Syn.Bot.Oscova.Delegates.IsActiveProvider">
            <summary>
            Any custom method that determines whether the current context item is active.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Oscova.Delegates.EntityExtractor">
            <summary>
            A custom method that evaluates the <see cref="T:Syn.Bot.Oscova.Request"/> and returns extracted entities.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Extensions.WordExtensions.IsEntityWordElevation(System.Double)">
            <summary>
            Increments the priority of a word if it's an entity word
            </summary>
            <param name="priority">The current word priority.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.Interfaces.IBakableRecognizer.IsBaked">
            <summary>
            Gets or sets a value indicating whether the entries are baked.
            </summary>
            <value>
              <c>true</c> if entries are baked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syn.Bot.Oscova.Interfaces.IEntityRecognizer">
            <summary>
            Interface for Oscova Entity Recognizers.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Interfaces.IEntityRecognizer.Type">
            <summary>
            Gets the <see cref="T:Syn.Bot.Oscova.Interfaces.IEntity"/> type parsed by this recognizer.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:Syn.Bot.Oscova.Interfaces.IEntityRecognizer.Parse(Syn.Bot.Oscova.Request)">
            <summary>
            Parses the specified request and returns a collection of recognized entities.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Oscova.Internal.ExpressToken.HasPrompt">
            <summary>
            Gets or sets a value indicating whether this token type has prompt.
            </summary>
            <value>
            <c>true</c> if this token has prompt; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Internal.ExpressToken.Format">
            <summary>
            Gets the normalized value after removing strip symbols.
            </summary>
            <value>
            The normalized value.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Internal.ExpressToken.Value">
            <summary>
            Gets the value without symbols being stripped.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Internal.ExpressToken.Type">
            <summary>
            Gets the type of expression token.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="T:Syn.Bot.Oscova.Languages.English.EnglishTokenizer">
            <summary>
            Represents default English Tokenizer.
            </summary>
            <seealso cref="T:Syn.Bot.Oscova.Interfaces.ITokenizer" />
        </member>
        <member name="M:Syn.Bot.Oscova.Languages.English.EnglishTokenizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Languages.English.EnglishTokenizer"/> class.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Languages.English.EnglishTokenizer.ReservedPatterns">
            <summary>
            Gets or sets the reserved patterns.
            </summary>
            <value>
            The reserved patterns.
            </value>
        </member>
        <member name="M:Syn.Bot.Oscova.Languages.English.EnglishTokenizer.Tokenize(System.String)">
            <summary>
            Tokenizes the specified text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Languages.English.EnglishLanguage.#ctor(Syn.Bot.Oscova.OscovaBot)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Languages.English.EnglishLanguage"/> class.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.ProcessingMode">
            <summary>
            Expression processing modes.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.ProcessingMode.Rule">
            <summary>
            (Default) Use in-built NLP engine.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.ProcessingMode.RuleAndML">
            <summary>
            Use in-built NLP engine and Machine Learning algorithm.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Events.TrainingFinishedEventArgs.TrainedModel">
            <summary>
            Gets the trained model document.
            </summary>
            <value>
            The trained model.
            </value>
        </member>
        <member name="T:Syn.Bot.Oscova.Recognizers.EntryRecognizer">
            <summary>
            Abstract Entries Recognizer.
            </summary>
            <seealso cref="T:Syn.Bot.Oscova.Interfaces.IBakableRecognizer" />
        </member>
        <member name="M:Syn.Bot.Oscova.Recognizers.EntryRecognizer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Recognizers.EntryRecognizer"/> class.
            </summary>
            <param name="type">The entity type parsed by the recognizer.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.Recognizers.EntryRecognizer.Type">
            <summary>
            Gets the <see cref="P:Syn.Bot.Oscova.Interfaces.IEntity.Type"/> parsed by this parser.
            </summary>
            <value>
            The <see cref="P:Syn.Bot.Oscova.Interfaces.IEntity.Type"/>.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Recognizers.EntryRecognizer.Entries">
            <summary>
            Gets or sets the entries.
            </summary>
            <value>
            The entries.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Recognizers.EntryRecognizer.EntriesRegex">
            <summary>
            Gets or sets the entries regex.
            </summary>
            <value>
            The entries regex.
            </value>
        </member>
        <member name="M:Syn.Bot.Oscova.Recognizers.EntryRecognizer.CreateEntity(Syn.Bot.Oscova.MatchItem)">
            <summary>
            Creates the entity.
            </summary>
            <param name="match">The match.</param>
            <remarks>
            This method is called after every successful match. 
            May also return <c>null</c> to avoid adding to returned <see cref="T:Syn.Bot.Oscova.Collection.EntityCollection"/>.
            </remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.Recognizers.EntryRecognizer.IsBaked">
            <summary>
            Gets or sets a value indicating whether the entries are baked.
            </summary>
            <value>
              <c>true</c> if entries are baked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syn.Bot.Oscova.Recognizers.EntryRecognizer.Parse(Syn.Bot.Oscova.Request)">
            <summary>
            Parses the specified request and returns a collection of recognized entities.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Recognizers.EntryRecognizer.Bake">
            <summary>
            Bakes <see cref="P:Syn.Bot.Oscova.Recognizers.EntryRecognizer.Entries"/> and creates required regular expression.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.ScoreConfiguration">
            <summary>
            Holds scoring values.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.ScoreConfiguration.MinimumScore">
            <summary>
            Gets or sets the absolute minimum intent score.
            </summary>
            <value>
            The minimum intent score.
            </value>
            <remarks>Default is <c>0.05</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.ScoreConfiguration.PromptMissingEntityScore">
            <summary>
            Gets or sets the score of an entity that is missing but has prompt.
            </summary>
            <value>
            The prompt missing entity score.
            </value>
            <remarks>Default is <c>0.5</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.ScoreConfiguration.MaxIntentScore">
            <summary>
            Gets or sets the maximum intent score when classifier is over confident.
            </summary>
            <remarks>Default is <c>0.99</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.ScoreConfiguration.PromptModeMissingWord">
            <summary>
            Gets or sets Score of a missing word in expression when classifier is in Prompt mode.
            </summary>
            <value>
            The missing expression word score.
            </value>
            <remarks>Default is <c>0.5</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.ScoreConfiguration.StemmedWordScore">
            <summary>
            Gets or sets the score of a stemmed word that was found instead of full word.
            </summary>
            <value>
            The stemmed word score.
            </value>
            <remarks>Default is <c>0.85</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.ScoreConfiguration.RuleScoreDependency">
            <summary>
            Gets or sets the rule score dependency percentage.
            </summary>
            <value>
            The rule score dependency percentage.
            </value>
            <remarks>Default is <c>0.6</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.ScoreConfiguration.MinWordVectorSimilarty">
            <summary>
            Gets or sets the minimum word vector similarty.
            </summary>
            <value>
            The minimum word vector similarty.
            </value>
            <remarks>Default is <c>0.9</c></remarks>
        </member>
        <member name="T:Syn.Bot.Oscova.Sys">
            <summary>
            List of all known System Entity types.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Text">
            <summary>
            Any non-empty text.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Url">
            <summary>
            A valid URL.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Country">
            <summary>
            Names of country.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Positive">
            <summary>
            Positive or affirmative user response.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Negative">
            <summary>
            Negative user response
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Color">
            <summary>
            Names of color.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Number">
            <summary>
            Integer or decimal numbers.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Ordinal">
            <summary>
            Ordinals
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Integer">
            <summary>
            Integer numbers.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Language">
            <summary>
            Names of languages.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Email">
            <summary>
            Valid email address.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.MusicGenre">
            <summary>
            Genre of Music.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitLengthName">
            <summary>
            Units of length.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitWeightName">
            <summary>
            Units of weight.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitSpeedName">
            <summary>
            Units of speed.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitVolumeName">
            <summary>
            Units of volume.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitTemperatureName">
            <summary>
            Units of temperature.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitAreaName">
            <summary>
            Units of area.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Temperature">
            <summary>
            Temperature with unit.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitArea">
            <summary>
            Area with unit.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitSpeed">
            <summary>
            Speed with unit.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitLength">
            <summary>
            Length with unit.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitVolume">
            <summary>
            Volume with unit.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitWeight">
            <summary>
            Weight with unit.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Duration">
            <summary>
            Duration
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.IpAddress">
            <summary>
            IP Address sequence.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Age">
            <summary>
            Person's age.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UsPostalCode">
            <summary>
            US postal code.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UkPostalCode">
            <summary>
            UK postal code.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.IndianPostalCode">
            <summary>
            Indian postal code.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Percentage">
            <summary>
            Number and percents
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.StatesUS">
            <summary>
            US states
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.StatesIndia">
            <summary>
            Indian states.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.NumberSequence">
            <summary>
            Number sequence.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.CurrencyName">
            <summary>
            Names of currencies.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Cardinal">
            <summary>
            Cardinal.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.IndianPhoneNumber">
            <summary>
            Indian phone number formats.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UsPhoneNumber">
            <summary>
            US phone number formats.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Time">
            <summary>
            Time.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Month">
            <summary>
            Name of months.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Day">
            <summary>
            Names of day of week.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Date">
            <summary>
            Date.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.DateTime">
            <summary>
            Date and time.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Utilities.DateTimeUtility.GetTimeString(System.DateTime)">
            <summary>
            Gets the time string in ISO-8601 format.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Oscova.OscovaBot">
            <summary>
            Represents the Oscova Bot system.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.Activate(System.String,System.String,System.String)">
            <summary>
            Activates the specified license type.
            </summary>
            <param name="licenseType">Type of the license.</param>
            <param name="licensee">The licensee.</param>
            <param name="licenseKey">The license key.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Logger">
            <summary>
            Gets the global bot logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Version">
            <summary>
            Gets the version of the Bot Library.
            </summary>
            <value>
            The Bot Library version.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Instance">
            <summary>
            Gets the shared main <see cref="T:Syn.Bot.Oscova.OscovaBot"/> instance. A new <see cref="T:Syn.Bot.Oscova.OscovaBot"/> object is initialized on 'Get' call.
            </summary>
            <value>
            The main bot.
            </value>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.OscovaBot"/> class.
            </summary>
            <remarks>Uses default Bot configuration.</remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.#ctor(Syn.Bot.Oscova.BotConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.OscovaBot"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Configuration">
            <summary>
            Gets the bot configuration.
            </summary>
            <value>
            The bot configuration.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Language">
            <summary>
            Gets or sets the language model
            </summary>
            <value>
            The Language model.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Dialogs">
            <summary>
            Gets the dialogs.
            </summary>
            <value>
            The dialogs.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Recognizers">
            <summary>
            Gets the recognizers.
            </summary>
            <value>
            The recognizers.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Users">
            <summary>
            Gets the users collection.
            </summary>
            <value>
            The users collection.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.MainUser">
            <summary>
            Gets the main bot user.
            </summary>
            <value>
            The main user.
            </value>
            <remarks>When no user detail is provided. A <see cref="T:Syn.Bot.Oscova.Request"/> is processed under this user's context.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Trainer">
            <summary>
            Gets the bot trainer.
            </summary>
            <value>
            The trainer.
            </value>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.CreateUser(System.String)">
            <summary>
            Creates a new <see cref="T:Syn.Bot.Oscova.BotUser"/> with the specified id.
            </summary>
            <param name="userId">The user identifier.</param>
            <remarks>
            If a user with the specified ID already exists then returns the existing user.
            </remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.CreateUser">
            <summary>
            Creates a new <see cref="T:Syn.Bot.Oscova.BotUser"/> with a unique id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.CreateCompositeType(System.String,System.String[])">
            <summary>
            Creates a composite entity type.
            </summary>
            <param name="compositeTypeName">Name of the type.</param>
            <param name="childrenTypes">The children entity types.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.CreateRecognizer(System.String,Syn.Bot.Oscova.Delegates.EntityExtractor)">
            <summary>
            Creates a <see cref="T:Syn.Bot.Oscova.Recognizers.FunctionalRecognizer"/>.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="extractor">The extractor method.</param>
            <returns><see cref="T:Syn.Bot.Oscova.Recognizers.FunctionalRecognizer"/></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.CreateRecognizer(System.String)">
            <summary>
            Creates a basic entry based <see cref="T:Syn.Bot.Oscova.Recognizers.EntityRecognizer"/>.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <remarks>Developer must fill in the <see cref="P:Syn.Bot.Oscova.Recognizers.EntryRecognizer.Entries"/> values manually.</remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.CreateRecognizer(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates an <see cref="T:Syn.Bot.Oscova.Recognizers.EntityRecognizer"/> for list of terms.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="valueList">The term list.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.CreateRecognizer(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Creates a <see cref="T:Syn.Bot.Oscova.Recognizers.RegexRecognizer"/> recognizer.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="regex">The regex.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.CreateRecognizer``1(System.String)">
            <summary>
            Creates an <see cref="T:Syn.Bot.Oscova.Recognizers.EntityRecognizer"/> for enum values.
            </summary>
            <typeparam name="T">Enum Type.</typeparam>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException">Raised if given type is not enum.</exception>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.Evaluate(System.String)">
            <summary>
            Evaluates the specified message as a <see cref="P:Syn.Bot.Oscova.OscovaBot.MainUser"/> request.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Raised if this method is called before the bot is trained.</exception>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.Evaluate(Syn.Bot.Oscova.Request)">
            <summary>
            Evaluates the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Raised if this method is called before the bot is trained.</exception>
        </member>
        <member name="E:Syn.Bot.Oscova.OscovaBot.InvokingIntent">
            <summary>
            Occurs when an <see cref="T:Syn.Bot.Oscova.IntentResult"/> is invoked.
            </summary>
        </member>
        <member name="E:Syn.Bot.Oscova.OscovaBot.TrainingStarted">
            <summary>
            Occurs when bot training is started.
            </summary>
        </member>
        <member name="E:Syn.Bot.Oscova.OscovaBot.TrainingFinished">
            <summary>
            Occurs when bot training has completed.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.Context">
            <summary>
            Represents a conversion context.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Context.Item(System.String)">
            <summary>
            Gets the <see cref="T:Syn.Bot.Oscova.ContextItem"/> with the specified name.
            </summary>
            <value>
            The <see cref="T:Syn.Bot.Oscova.ContextItem"/>.
            </value>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Context.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Context.Contains(Syn.Bot.Oscova.ContextItem)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Context.Contains(System.String)">
            <summary>
            Determines whether [contains] [the specified name].
            </summary>
            <param name="name">The name.</param>
            <returns>
              <c>true</c> if [contains] [the specified name]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Syn.Bot.Oscova.Context.SharedEntities">
            <summary>
            Gets the shared entities.
            </summary>
            <value>
            The shared entities.
            </value>
        </member>
        <member name="T:Syn.Bot.Oscova.Dialog">
            <summary>
            Represent an <see cref="T:Syn.Bot.Oscova.OscovaBot"/> dialog system with Intents.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Dialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Dialog"/> class.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Dialog.Name">
            <summary>
            Gets the name of this dialog.
            </summary>
            <value>
            The name.
            </value>
            <remarks>If the name is not overriden then type name is returned.</remarks>
        </member>
        <member name="T:Syn.Bot.Oscova.IntentResult">
            <summary>
            Represents the returned value of intent evaluation.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.IntentResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.IntentResult"/> class.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.IntentResult.Name">
            <summary>
            Gets the full name of this intent.
            </summary>
            <value>
            The full name.
            </value>
            <remarks>Dialog name and Method name.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.IntentResult.PromptMessage">
            <summary>
            Gets the prompt message.
            </summary>
            <value>
            The prompt message.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.IntentResult.Score">
            <summary>
            Gets the calibrated intent result score.
            </summary>
            <value>
            The score.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.IntentResult.Interpretation">
            <summary>
            Gets the interpretated value.
            </summary>
            <value>
            The interpretated value.
            </value>
        </member>
        <member name="F:Syn.Bot.Oscova.IntentResult.Empty">
            <summary>
            Represents an empty <see cref="T:Syn.Bot.Oscova.IntentResult"/>. This field is read-only.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.Language">
            <summary>
            Represents the Human Language Model used for Natural Language Processing by <see cref="T:Syn.Bot.Oscova.OscovaBot"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Language.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Language"/> class.
            </summary>
            <param name="cultureInfo">The culture information.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Language.LoadWordVectors(System.IO.Stream,Syn.Bot.Oscova.FileFormat)">
            <summary>
            Loads word vectors from stream of binary of text file.
            </summary>
            <param name="stream">The stream.</param>
            <param name="fileFormat">The file format.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.Language.WordNet">
            <summary>
            Gets the WordNet engine.
            </summary>
            <value>
            The WordNet engine.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Language.WordSpacing">
            <summary>
            Gets or sets the word spacing.
            </summary>
            <value>
            The word spacing.
            </value>
            <remarks>Number of characters separating each word.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.Language.Culture">
            <summary>
            Gets the culture.
            </summary>
            <value>
            The culture.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Language.Punctuations">
            <summary>
            Gets or sets the punctuations.
            </summary>
            <value>
            The punctuations.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Language.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>
            The filters.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Language.Tokenizer">
            <summary>
            Gets or sets the tokenizer.
            </summary>
            <value>
            The tokenizer.
            </value>
            <remarks>External implementations must consider curly braces as single tokens.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.Language.Detokenizer">
            <summary>
            Gets or sets the detokenizer.
            </summary>
            <value>
            The detokenizer.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Language.Stemmer">
            <summary>
            Gets or sets the stemmer.
            </summary>
            <value>
            The stemmer.
            </value>
            <remarks>When external Lexical Database is connected. Oscova treats the stemmer as a lemmatizer.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.Language.StopWords">
            <summary>
            Gets or sets the stop words.
            </summary>
            <value>
            The stop words.
            </value>
            <remarks>Stop words are commonly used words which are filtered or ignored during text processing.</remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.Language.AddFilter(Syn.Bot.Oscova.FilterType,System.String,System.String)">
            <summary>
            Adds the filter.
            </summary>
            <param name="type">The filter type.</param>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Language.Normalize(System.String)">
            <summary>
            Normalizes the specified input by applying filters and removing punctuations.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="T:Syn.Bot.Oscova.Response">
            <summary>
            Represents a Bot response.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Response.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Response"/> class.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Response.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Response.Type">
            <summary>
            Gets or sets the response type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Response.Format">
            <summary>
            Gets or sets the response format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Response.Hint">
            <summary>
            Gets or sets the response hint.
            </summary>
            <value>
            The hint.
            </value>
            <remarks>A hint is the next user input sequence expected by the bot.</remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.Response.Serialize">
            <summary>
            Serializes this response into JSON.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.Request">
            <summary>
            Represents a user query.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Request.User">
            <summary>
            Gets the user.
            </summary>
            <value>
            The user.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Request.Bot">
            <summary>
            Gets the bot.
            </summary>
            <value>
            The bot.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Request.Text">
            <summary>
            Gets or sets the original user request text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Request.NormalizedText">
            <summary>
            Gets the normalized text.
            </summary>
            <value>
            The normalized text.
            </value>
        </member>
        <member name="T:Syn.Bot.Oscova.EvaluationResult">
            <summary>
            Represents an evaluation result generated by <see cref="T:Syn.Bot.Oscova.OscovaBot"/>.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.EvaluationResult.ProcessingTime">
            <summary>
            Gets the request processing time.
            </summary>
            <value>
            The request processing time.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.EvaluationResult.Intents">
            <summary>
            Gets the intents.
            </summary>
            <value>
            The intents.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.EvaluationResult.Entities">
            <summary>
            Gets the entities.
            </summary>
            <value>
            The entities.
            </value>
        </member>
        <member name="M:Syn.Bot.Oscova.EvaluationResult.Invoke(Syn.Bot.Oscova.IntentResult)">
            <summary>
            Invokes the the specified <see cref="T:Syn.Bot.Oscova.IntentResult"/>.
            </summary>
            <param name="intentResult">The result.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.EvaluationResult.Invoke">
            <summary>
            Invokes the highest scoring contextual intent.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.EvaluationResult.Serialize">
            <summary>
            Serializes this evaluation result into JSON.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.Result">
            <summary>
            Represents a result generated by <see cref="T:Syn.Bot.Oscova.OscovaBot"/> after evaluation of a <see cref="P:Syn.Bot.Oscova.Result.Request"/>.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Result.SessionId">
            <summary>
            Gets the current user session identifier.
            </summary>
            <value>
            The user session identifier.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Result.Intents">
            <summary>
            Gets the intents.
            </summary>
            <value>
            The intents.
            </value>
            <remarks>Intents are ordered based on <see cref="P:Syn.Bot.Oscova.IntentResult.Score"/>.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.Result.Entities">
            <summary>
            Gets the entities.
            </summary>
            <value>
            The entities.
            </value>
            <remarks>Entities are ordered based on <see cref="P:Syn.Bot.Oscova.Interfaces.IEntity.Index"/>.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.Result.CurrentIntent">
            <summary>
            Gets the current intent which has been invoked.
            </summary>
            <value>
            The currently invoked intent.
            </value>
        </member>
        <member name="M:Syn.Bot.Oscova.Result.SendResponse(System.String)">
            <summary>
            Sends the specified message to the user.
            </summary>
            <param name="message">The bot message.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Result.SendResponse(Syn.Bot.Oscova.Response)">
            <summary>
            Sends the specified response to the user.
            </summary>
            <param name="response">The bot response.</param>
        </member>
        <member name="T:Syn.Bot.Oscova.ContextItem">
            <summary>
            Represents the state of a Chat Session.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.ContextItem.RenewLifespan">
            <summary>
            Renews the context lifespan.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.ContextItem.Parameters">
            <summary>
            Gets the contextual parameters.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.ContextItem.Name">
            <summary>
            Gets the context name.
            </summary>
            <value>
            The context name.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.ContextItem.Lifespan">
            <summary>
            Gets the context lifespan.
            </summary>
            <value>
            The context lifespan.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.ContextItem.IsActive">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Syn.Bot.Oscova.ContextItem.Empty">
            <summary>
            Represents an empty context item. This field is read-only.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.Trainer">
            <summary>
            Represents an Oscova bot training system.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Trainer.GetTrainingData">
            <summary>
            Gets the training data for external training of Neural Network.
            </summary>
            <remarks>To be used with Syn Bot Studio only.</remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.Trainer.StartTraining">
            <summary>
            Starts training the Bot.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Trainer.StartTraining(System.Xml.Linq.XDocument)">
            <summary>
            Starts training the Bot using the model provided.
            </summary>
            <param name="trainedModel"></param>
        </member>
        <member name="P:Syn.Bot.Siml.Adapters.IfAdapter.IsRecursive">
            <summary>
            False - Processing of inner nodes should only be done if a condition is satisfied.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Adapters.MathAdapter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Adapters.MathAdapter"/> class.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ExampleCollection.#ctor(Syn.Bot.Siml.SimlBot)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Collections.ExampleCollection"/> class.
            </summary>
            <param name="bot">The bot.</param>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.ExampleCollection.SuggestionFormatter">
            <summary>
            Gets or set the <see cref="T:Syn.Bot.Siml.Interfaces.ISuggestionFormatter"/> for the <see cref="T:Syn.Bot.Siml.Adapters.SuggestionAdapter"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ExampleCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ExampleCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ExampleCollection.Add(Syn.Bot.Siml.Collections.ExampleItem,System.Boolean)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <param name="addVocabulary">Add vocabulary.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ExampleCollection.Add(Syn.Bot.Siml.Collections.ExampleItem)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ExampleCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ExampleCollection.Contains(Syn.Bot.Siml.Collections.ExampleItem)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ExampleCollection.Contains(System.String)">
            <summary>
            Determines whether this <see cref="T:Syn.Bot.Siml.Collections.ExampleCollection"/> contains the specified example value.
            </summary>
            <param name="examplePattern">The example value.</param>
            <returns>
              <c>true</c> if this <see cref="T:Syn.Bot.Siml.Collections.ExampleCollection"/> contains the specified example value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ExampleCollection.CopyTo(Syn.Bot.Siml.Collections.ExampleItem[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ExampleCollection.Remove(Syn.Bot.Siml.Collections.ExampleItem)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.ExampleCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.ExampleCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Collections.ParserCollection">
            <summary>
            Represents a collection of <see cref="T:Syn.Bot.Siml.Interfaces.IParser"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ParserCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ParserCollection.Add(Syn.Bot.Siml.Interfaces.IParser)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ParserCollection.AddRange(Syn.Bot.Siml.Interfaces.IParser[])">
            <summary>
            Adds the range.
            </summary>
            <param name="handlers">The handlers.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ParserCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.ParserCollection.Item(System.Xml.Linq.XName)">
            <summary>
            Gets the <see cref="T:Syn.Bot.Siml.Interfaces.IParser"/> with the specified name.
            </summary>
            <value>
            The <see cref="T:Syn.Bot.Siml.Interfaces.IParser"/>.
            </value>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ParserCollection.Contains(Syn.Bot.Siml.Interfaces.IParser)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ParserCollection.Contains(System.Xml.Linq.XName)">
            <summary>
            Determines whether this collection contains a parser for the specified tag name.
            </summary>
            <param name="tagName">Name of the tag.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ParserCollection.CopyTo(Syn.Bot.Siml.Interfaces.IParser[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ParserCollection.Remove(Syn.Bot.Siml.Interfaces.IParser)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.ParserCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.ParserCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Collections.MapItem">
            <summary>
            Default implementation of <see cref="T:Syn.Bot.Siml.Interfaces.IMapItem"/> interface.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Collections.Map">
            <summary>
            Default implementation of <see cref="T:Syn.Bot.Siml.Interfaces.IMap"/> interface.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.Map.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Collections.Map"/> class.
            </summary>
            <param name="mapName">Name of the map.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.Map.Add(Syn.Bot.Siml.Interfaces.IMapItem)">
            <summary>
            Adds the specified map item.
            </summary>
            <param name="mapItem">The map item.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.Map.Add(System.String,System.String)">
            <summary>
            Creates and adds a new <see cref="T:Syn.Bot.Siml.Collections.MapItem"/> using the specified Content and Value.
            </summary>
            <param name="content">The content.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.Map.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.Map.Contains(Syn.Bot.Siml.Interfaces.IMapItem)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.Map.CopyTo(Syn.Bot.Siml.Interfaces.IMapItem[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.Map.Remove(Syn.Bot.Siml.Interfaces.IMapItem)">
            <summary>
            Removes the specified map item.
            </summary>
            <param name="mapItem">The map item.</param>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.Map.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.Map.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.Map.Name">
            <summary>
            Gets the name of the Map
            </summary>
            <value>
            The unique name of the Map.
            </value>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.Map.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Syn.Bot.Siml.Collections.VocabularyCollection">
            <summary>
            A Collection of all the known tokens.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.VocabularyCollection.#ctor(Syn.Bot.Siml.SimlBot)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Collections.VocabularyCollection"/> class.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.VocabularyCollection.Add(System.String)">
            <summary>
            Adds a new <see cref="T:Syn.Bot.Siml.Collections.VocabularyItem"/> with the specified token.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.VocabularyCollection.Add(Syn.Bot.Siml.Collections.VocabularyItem)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.VocabularyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.VocabularyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.VocabularyCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.VocabularyCollection.Contains(Syn.Bot.Siml.Collections.VocabularyItem)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.VocabularyCollection.CopyTo(Syn.Bot.Siml.Collections.VocabularyItem[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.VocabularyCollection.Remove(Syn.Bot.Siml.Collections.VocabularyItem)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.VocabularyCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.VocabularyCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.VocabularyItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Collections.VocabularyItem"/> class.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.VocabularyItem.Token">
            <summary>
            Gets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.VocabularyItem.Frequency">
            <summary>
            Gets or sets the frequency.
            </summary>
            <value>
            The frequency.
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.Collections.Tokenizer">
            <summary>
            Represents an SIML splitter element.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.Tokenizer.#ctor(Syn.Bot.Siml.Collections.TokenizerType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Collections.Tokenizer"/> class.
            </summary>
            <param name="type">Splitter type.</param>
            <param name="value">Splitting value.</param>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.Tokenizer.Type">
            <summary>
            Gets the type of this <see cref="T:Syn.Bot.Siml.Collections.Tokenizer"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.Tokenizer.Value">
            <summary>
            Gets the splitter value.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.Tokenizer.Tokenize(System.Collections.Generic.List{System.String})">
            <summary>
            Splits the specified source string.
            </summary>
            <param name="sourceList">The source string.</param>
            <returns>List of string split using this <see cref="T:Syn.Bot.Siml.Collections.Tokenizer"/>'s value.</returns>
        </member>
        <member name="T:Syn.Bot.Siml.Collections.TokenizerType">
            <summary>
            Provides enumerated values that determine the behavior of a <see cref="T:Syn.Bot.Siml.Collections.Tokenizer"/>
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Collections.TokenizerType.Text">
            <summary>
            Textual splitter.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Collections.TokenizerType.Word">
            <summary>
            Word based splitter.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Collections.TokenizerType.Regex">
            <summary>
            Regular Expression based splitter.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Collections.AdapterCollection">
            <summary>
            Represents a collection of <see cref="T:Syn.Bot.Siml.Interfaces.IAdapter"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.AdapterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Collections.AdapterCollection"/> class.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.AdapterCollection.AddRange(Syn.Bot.Siml.Interfaces.IAdapter[])">
            <summary>
            Adds all the specified <see cref="T:Syn.Bot.Siml.Interfaces.IAdapter"/>s
            </summary>
            <param name="handlers"></param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.AdapterCollection.Add(Syn.Bot.Siml.Interfaces.IAdapter)">
            <summary>
            Adds the specified handler.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.AdapterCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.AdapterCollection.Item(System.Xml.Linq.XName)">
            <summary>
            Gets the <see cref="T:Syn.Bot.Siml.Interfaces.IAdapter"/> with the specified name.
            </summary>
            <value>
            The <see cref="T:Syn.Bot.Siml.Interfaces.IAdapter"/>.
            </value>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.AdapterCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains an <see cref="T:Syn.Bot.Siml.Interfaces.IAdapter"/> with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.AdapterCollection.Contains(Syn.Bot.Siml.Interfaces.IAdapter)">
            <summary>
             Determines whether this collection contains the specified <see cref="T:Syn.Bot.Siml.Interfaces.IAdapter"/>.
            </summary>
            <param name="tagAdapter">The tag adapter.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.AdapterCollection.CopyTo(Syn.Bot.Siml.Interfaces.IAdapter[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.AdapterCollection.Remove(Syn.Bot.Siml.Interfaces.IAdapter)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.AdapterCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.AdapterCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.AdapterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.AdapterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Collections.SetItem"/> class.
            </summary>
            <param name="name">The name of this <see cref="T:Syn.Bot.Siml.Collections.SetItem"/>.</param>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.SetItem.Name">
            <summary>
            Gets or sets the unique name of this <see cref="T:Syn.Bot.Siml.Collections.SetItem"/>.
            </summary>
            <value>
            The name of this <see cref="T:Syn.Bot.Siml.Collections.SetItem"/>
            </value>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.FilterCollection.#ctor(Syn.Bot.Siml.SimlBot)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Collections.FilterCollection"/> class.
            </summary>
            <param name="mainBot">The main bot.</param>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.FilterCollection.Count">
            <summary>
            Gets the total number of filter items added to this filter collection.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.FilterCollection.AddFilter(System.Xml.Linq.XElement)">
            <summary>
            Adds a filter.
            </summary>
            <param name="filterElement">The filter element.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.FilterCollection.Clear">
            <summary>
            Clears this filter collection.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Collections.MapCollection">
            <summary>
            Represents a collection of SIML Maps.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.#ctor(Syn.Bot.Siml.SimlBot)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Collections.MapCollection"/> class.
            </summary>
            <param name="mainBot">The main bot.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.Add(System.Xml.Linq.XElement)">
            <summary>
            Adds a Map to this collection.
            </summary>
            <param name="mapElement">The map element.</param>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.MapCollection.IsOverridable">
            <summary>
            Determines if an existing MapItem's value can be changed on Load. False by default.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.MapCollection.Item(System.String)">
            <summary>
            Gets a Map with this specified name
            </summary>
            <param name="mapName">Name of the map.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains the specified Map.
            </summary>
            <param name="mapName">Name of the Map.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.Transform(Syn.Bot.Siml.Context,System.String)">
            <summary>
            Transforms the specified parameter.
            </summary>
            <param name="context">The parameter.</param>
            <param name="mapName">Name of the Map.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.Add(Syn.Bot.Siml.Interfaces.IMap)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.Contains(Syn.Bot.Siml.Interfaces.IMap)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.CopyTo(Syn.Bot.Siml.Interfaces.IMap[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.Remove(Syn.Bot.Siml.Interfaces.IMap)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.MapCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.MapCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.GetDocument">
            <summary>
            Gets an SIML document that represents this <see cref="T:Syn.Bot.Siml.Collections.MapCollection"/>.
            </summary>
        </member>
        <member name="E:Syn.Bot.Siml.Collections.MapCollection.CollectionChanged">
            <summary>
            Occurs when a Map is added, removed, updated or when this collection is cleared.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Collections.RegexCollection">
            <summary>
            Class that contains all Regular Expressions created by the Developer.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.RegexCollection.#ctor(Syn.Bot.Siml.SimlBot)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Collections.RegexCollection"/> class.
            </summary>
            <param name="bot">The bot.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.RegexCollection.IsAllowed">
            <summary>
            Determines if usage Regular Expressions is enabled.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Collections.SetCollection">
            <summary>
            Represents a collection of SIML <see cref="T:Syn.Bot.Siml.Collections.SetItem"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.#ctor(Syn.Bot.Siml.SimlBot)">
            <summary>
            Initializes a new instance of <see cref="T:Syn.Bot.Siml.Collections.SetCollection"/> class.
            </summary>
            <param name="bot"></param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.GetMatchString(Syn.Bot.Siml.ChatRequest,System.String,System.String,System.Boolean)">
            <summary>
            Gets the match string.
            </summary>
            <param name="request">The request.</param>
            <param name="setName">Name of the set.</param>
            <param name="sentence">The sentence.</param>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.SetCollection.IsOverridable">
            <summary>
            Gets a value indicating if an already existing <see cref="T:Syn.Bot.Siml.Collections.SetItem"/> can be replaced by a new <see cref="T:Syn.Bot.Siml.Collections.SetItem"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.Add(System.Xml.Linq.XElement)">
            <summary>
            Parses and adds the specified <see cref="T:System.Xml.Linq.XElement"/> as <see cref="T:Syn.Bot.Siml.Collections.SetItem"/>.
            </summary>
            <param name="setElement">The set element.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.Add(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a new set with the specified name and items.
            </summary>
            <param name="setName">Name of the set.</param>
            <param name="words">The set items.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.Add(Syn.Bot.Siml.Interfaces.ISet)">
            <summary>
            Adds the specified <see cref="T:Syn.Bot.Siml.Collections.SetItem"/> to this collection.
            </summary>
            <param name="setItem">The <see cref="T:Syn.Bot.Siml.Collections.SetItem"/> to add.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.Contains(System.String)">
            <summary>
            Determines whether a <see cref="T:Syn.Bot.Siml.Collections.SetItem"/> with the specified name exists.
            </summary>
            <param name="setName">Name of the <see cref="T:Syn.Bot.Siml.Collections.SetItem"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.ContainsWord(System.String)">
            <summary>
            Determines whether the specified set word exists in any of the Sets.
            </summary>
            <param name="word">The set word.</param>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.SetCollection.Item(System.String)">
            <summary>
            Gets a <see cref="T:Syn.Bot.Siml.Collections.SetItem"/> with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:Syn.Bot.Siml.Collections.SetItem"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.Clear">
            <summary>
            Clears this collection.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.Contains(Syn.Bot.Siml.Interfaces.ISet)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.CopyTo(Syn.Bot.Siml.Interfaces.ISet[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.Remove(Syn.Bot.Siml.Interfaces.ISet)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.Remove(System.String)">
            <summary>
            Removes the specified set name.
            </summary>
            <param name="setName">Name of the set.</param>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.SetCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.SetCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.GetDocument">
            <summary>
            Gets an SIML document that represents this <see cref="T:Syn.Bot.Siml.Collections.SetCollection"/>.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.CommonSettings.DefaultValue">
            <summary>
            Gets or Sets the Default Value to return when a Settings Item is not found.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.CommonSettings.UndefinedValue">
            <summary>
            Gets the value that is used to render a Variable as undefined.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.CommonSettings.GetValue(System.String)">
            <summary>
            Gets the main value of the specified variable.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <returns>Value of the variable if it exists otherwise returns the default value.</returns>
        </member>
        <member name="M:Syn.Bot.Siml.CommonSettings.Load(System.Xml.Linq.XDocument)">
            <summary>
            Loads the specified settings from an SIML Document.
            </summary>
            <param name="simlDocument">The SIML Document.</param>
        </member>
        <member name="M:Syn.Bot.Siml.CommonSettings.Load(System.Xml.Linq.XElement)">
            <summary>
            Loads the specified settings element.
            </summary>
            <param name="settingsElement">The settings element.</param>
        </member>
        <member name="M:Syn.Bot.Siml.CommonSettings.GetDocument">
            <summary>
            Gets this <see cref="T:Syn.VA.Settings"/> instance as an SIML <see cref="T:System.Xml.Linq.XDocument"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Siml.DelayBase.Stopwatch">
            <summary>
            Gets the <see cref="P:Syn.Bot.Siml.DelayBase.Stopwatch"/> used to check if the service can be executed.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Events.MapChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syn.Bot.Siml.Collections.MapCollection.CollectionChanged"/> event.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Events.MapChangedEventArgs.MapItem">
            <summary>
            Gets the <see cref="T:Syn.Bot.Siml.Interfaces.IMapItem"/> affected by an Add, Remove, Replace action.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Events.MapChangedEventArgs.Action">
            <summary>
            Gets the action that caused the event. 
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Events.MapChangedAction">
            <summary>
            Describes the action that caused a <see cref="E:Syn.Bot.Siml.Collections.MapCollection.CollectionChanged"/> event. 
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Events.MapChangedAction.Add">
            <summary>
            One or more items were added to the Map.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Events.MapChangedAction.Remove">
            <summary>
            One or more items were removed from the Map.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Events.MapChangedAction.Reset">
            <summary>
            The content of the Map changed dramatically.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Events.MapChangedAction.Replace">
            <summary>
            One or more items were replaced in the Map.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Events.MapCollectionChangedEventArgs.Map">
            <summary>
            Gets the Map associated with this event argument.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Events.MapCollectionChangedEventArgs.EffectOnCollection">
            <summary>
            The effect on <see cref="T:Syn.Bot.Siml.Collections.MapCollection"/>.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Events.MapCollectionEffect">
            <summary>
            Type of effect on a <see cref="T:Syn.Bot.Siml.Collections.MapCollection"/>
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Events.MapCollectionEffect.MapAdded">
            <summary>
            A new Map is added.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Events.MapCollectionEffect.MapRemoved">
            <summary>
            An existing Map is removed.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Events.MapCollectionEffect.CollectionCleared">
            <summary>
            The collection cleared
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Events.MapCollectionEffect.MapUpdated">
            <summary>
            Value of an existing Map is updated.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Extensions.SettingsExtensions">
            <summary>
            Extends the functionality of the <see cref="T:Syn.VA.Settings"/> class.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Graph.Wildcard">
            <summary>
            Represents an SIML wildcard symbol.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Graph.TraversedNode">
            <summary>
            A class that contains all the SIML nodes traversed by the <see cref="T:Syn.Bot.Siml.Graph.GraphNode"/> when searching for a response when a <see cref="T:Syn.Bot.Siml.ChatRequest"/> is received.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.TraversedNode.VisitedNodes">
            <summary>
            Gets all the <see cref="T:Syn.Bot.Siml.Graph.GraphNode"/>s visited by the GraphMaster.
            </summary>
            <value>
            The visited nodes.
            </value>
        </member>
        <member name="M:Syn.Bot.Siml.Graph.TraversedNode.GenerateNodes">
            <summary>
            Generates the nodes whose existence can be checked using the ContainsNode method.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Graph.TraversedNode.ContainsNode(Syn.Bot.Siml.Graph.GraphNode)">
            <summary>
            Determines whether the specified node was searched by the Graph Master in the previous session.
            </summary>
            <param name="node">The GraphNode.</param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Siml.Graph.GraphNode">
            <summary>
            Represents an SIML Hybrid-Graph System.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.GraphNode.Children">
            <summary>
            GraphNode children.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.GraphNode.Response">
            <summary>
            Gets the response associated with this GraphNode.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.GraphNode.Parent">
            <summary>
            Gets the Parent of this GraphNode. This field is used to safely delete shared GraphNodes for Bots.
            This field is also used for Search Tree visualization.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.GraphNode.Keyword">
            <summary>
            Key associated with this GraphNode.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Graph.GraphNode.AddTree(Syn.Bot.Siml.Graph.ResponseTree,Syn.Bot.Siml.SimlBot)">
            <summary>
            Adds given Response Tree to the GraphNode.
            </summary>
            <param name="responseTree">Response Tree to Add.</param>
            <param name="bot">SynBot. The specified bot and its Cache Manager will be used to store the responses.</param>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.GraphNode.HasChildren">
            <summary>
            Indicates whether this Graph Node has Children Nodes.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Graph.GraphNode.Evaluate(Syn.Bot.Siml.ChatRequest,Syn.Bot.Siml.Graph.QueryTree,Syn.Bot.Siml.Graph.Wildcard)">
            <summary>
            Evaluates the specified request and tries to find the best Response.
            </summary>
            <param name="request">The ChatRequest.</param>
            <param name="pathTree">The current path tree</param>
            <param name="wildCard">The wild card.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Graph.GraphNode.Delete">
            <summary>
            Safely removes this Node from its Parent.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Graph.GraphNode.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this GraphNode's Keyword
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.Tree.State">
            <summary>
            Gets the current query state.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.Tree.IsParsed">
            <summary>
            Gets a value indicating whether this <see cref="T:Syn.Bot.Siml.Graph.Tree"/> is parsed and contains 0 token.
            </summary>
            <value>
              <c>true</c> if this <see cref="T:Syn.Bot.Siml.Graph.Tree"/> is parsed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.QueryTree.InputSentence">
            <summary>
            Actual sentence that made up this Token Tree. This property's value is created by splitting sentences using the Splitter.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.QueryTree.OutputResponse">
            <summary>
            Used to store Output Response.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Graph.QueryTree.RemoveLastToken">
            <summary>
            Removes the Last token from this <see cref="T:Syn.Bot.Siml.Graph.QueryTree"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.QueryTree.CurrentInputSentence">
            <summary>
            Input Sentence based on Token List.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.ResponseTree.PreviousValue">
            <summary>
            Used to transfer Previous tag value to Model Response for Stack generation
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Helper.StringComparisonUtility.SentenceSimilarity(System.String,System.String)">
            <summary>
            Default Similarity Algorithm based on advanced search techniques.
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Siml.Helper.CacheManager">
            <summary>
            Default cache management class for SynBot.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Helper.Compressor.HashTable">
            <summary>
            Hashtable, that can be allocated only once
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Helper.Compressor.LzfCompress(System.Byte[],System.Byte[]@)">
            <summary>
            Compresses the data using LibLZF algorithm
            </summary>
            <param name="input">Reference to the data to compress</param>
            <param name="output">Reference to a buffer which will contain the compressed data</param>
            <returns>The size of the compressed archive in the output buffer</returns>
        </member>
        <member name="M:Syn.Bot.Siml.Helper.Compressor.LzfDecompress(System.Byte[],System.Byte[]@)">
            <summary>
            Decompresses the data using LibLZF algorithm
            </summary>
            <param name="input">Reference to the data to decompress</param>
            <param name="output">Reference to a buffer which will contain the decompressed data</param>
            <returns>Returns decompressed size</returns>
        </member>
        <member name="P:Syn.Bot.Siml.Helper.Tag.KnownDeprecatedHtmlTags">
            <summary>
            Gets the known deprecated HTML tags.
            </summary>
            <value>
            The known deprecated HTML tags.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Helper.Tag.KnownHtmlTags">
            <summary>
            Gets a list of all the known HTML tags.
            </summary>
            <value>
            The known HTML tags.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Helper.Tag.KnownSimlTags">
            <summary>
            Gets a list of all known tags.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Helper.Tag.KnownSimlAttributes">
            <summary>
            Gets a list of all known attributes.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Helper.Tag.KnownSymbols">
            <summary>
            Gets a lsit of all the known symbols valid within the Pattern element.
            </summary>
            <value>
            The known symbols.
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.Helper.Utility">
            <summary>
            A collection of helper methods.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Helper.Utility.CompressString(System.String)">
            <summary>
            Compresses the string.
            </summary>
            <param name="text">The text to compress.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Helper.Utility.DecompressString(System.String)">
            <summary>
            Decompresses the string.
            </summary>
            <param name="compressedText">The compressed text.</param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Siml.Functional.FunctionalMapItem">
            <summary>
            Default implementation of <see cref="T:Syn.Bot.Siml.Interfaces.IFunctionalMapItem"/> interface.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Functional.FunctionalMapItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Functional.FunctionalMapItem"/> class.
            </summary>
            <param name="content">The content.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Syn.Bot.Siml.Functional.FunctionalMapItem.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Functional.FunctionalMapItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.Analysis.SimlAnalyzer">
            <summary>
            An SIML code analyzer.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Analysis.SimlAnalyzer.#ctor(Syn.Bot.Siml.Analysis.AnalysisMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Analysis.SimlAnalyzer"/> class.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Analysis.SimlAnalyzer.Mode">
            <summary>
            Gets the mode of analysis.
            </summary>
            <value>
            The analysis mode.
            </value>
        </member>
        <member name="M:Syn.Bot.Siml.Analysis.SimlAnalyzer.AddFile(System.String,System.String)">
            <summary>
            Adds an SIML code along with its file name.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="simlString">The SIML code string.</param>
        </member>
        <member name="P:Syn.Bot.Siml.Analysis.SimlAnalyzer.AnalysisBot">
            <summary>
            Gets the temporary analysis bot.
            </summary>
            <value>
            The analysis bot.
            </value>
        </member>
        <member name="M:Syn.Bot.Siml.Analysis.SimlAnalyzer.StartAnalysis">
            <summary>
            Starts the analysis.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Analysis.SimlAnalyzer.StopAnalysis">
            <summary>
            Stops the analysis and clears the cache.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Analysis.SimlAnalyzer.Frames">
            <summary>
            Gets the analysis frames.
            </summary>
            <value>
            The analysis frames.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Analysis.SimlAnalyzer.CurrentFileName">
            <summary>
            Gets or sets the name of the current file being analyzed.
            </summary>
            <value>
            The name of the current file.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Analysis.SimlAnalyzer.Status">
            <summary>
            Gets or sets the status of the Analyzer.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.BotConfiguration">
            <summary>
            A pre-load configuration class for <see cref="T:Syn.Bot.Siml.SimlBot"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.BotConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.BotConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.LicenseKey">
            <summary>
            Gets or sets the license key.
            </summary>
            <value>
            The license key.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.BotID">
            <summary>
            Gets or sets the unique ID for the Bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.CacheManager">
            <summary>
            Gets or sets the cache manager.
            </summary>
            <value>
            Any valid implementation of ICacheManager.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowRegex">
            <summary>
            Gets or sets a value indicating whether regular expressions are allowed.
            </summary>
            <value>
              <c>true</c> if regular expressions are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowSets">
            <summary>
            Gets or sets a value indicating whether Sets are allowed.
            </summary>
            <value>
              <c>true</c> if sets are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowMaps">
            <summary>
            Gets or sets a value indicating whether Maps are allowed.
            </summary>
            <value>
              <c>true</c> if Maps are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowFilters">
            <summary>
            Gets or sets a value indicating whether filters are allowed.
            </summary>
            <value>
              <c>true</c> if filters are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowJavaScript">
            <summary>
            Gets or sets a value indicating whether JavaScript is allowed.
            </summary>
            <value>
              <c>true</c> if JavaScript is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowStacking">
            <summary>
            Gets or sets a value indicating whether Stack frames should be stored.
            </summary>
            <value>
              <c>true</c> if Stack frames are to be stored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowEmotions">
            <summary>
            Gets or sets a value indicating whether emotions are allowed.
            </summary>
            <value>
              <c>true</c> if emotions are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowConditionsInPattern">
            <summary>
            Gets or sets a value indicating whether <c>If</c> conditions are allowed within <c>Patterns</c>
            </summary>
            <value>
            <c>true</c> if <c>If</c> conditions are allowed within <c>Patterns</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowConditionsInPublicPattern">
            <summary>
            Gets or sets a value indicating whether <c>If</c> conditions are allowed in Public <c>Patterns</c>
            </summary>
            <value>
            <c>true</c> if <c>If</c> conditions are allowed within Public <c>Patterns</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowScriptsInPattern">
            <summary>
            Gets or sets a value indicating whether scripts are allowed within <c>Patterns</c>.
            </summary>
            <value>
            <c>true</c> if scripts are allowed in <c>Patterns</c> ; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowPublicScriptsInPattern">
            <summary>
            Gets or sets a value indicating whether scripts are allowed in public <c>Patterns</c>.
            </summary>
            <value>
            <c>true</c> if scripts are allowed in public <c>Patterns</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowLearning">
            <summary>
            Gets or sets a value indicating whether the Bot is allowed to store Models in its Master <see cref="T:Syn.Bot.Siml.Graph.GraphNode"/>.
            </summary>
            <value>
              <c>true</c> if Models can be stored in the Master <see cref="T:Syn.Bot.Siml.Graph.GraphNode"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowRemembering">
            <summary>
            Gets or sets a value indicating whether Models can be stored in User's <see cref="T:Syn.Bot.Siml.Graph.GraphNode"/>.
            </summary>
            <value>
              <c>true</c> if Models can be stored in the User's <see cref="T:Syn.Bot.Siml.Graph.GraphNode"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowScripting">
            <summary>
            Gets or sets a value indicating if scripts are allowed.
            </summary>
            <value>
              <c>true</c> if scripts are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowInteractionStorage">
            <summary>
            Gets or sets a value indicating whether Interactions should be stored.
            </summary>
            <value>
              <c>true</c> if Interactions are to be stored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.StoreVocabulary">
            <summary>
            Gets or sets a value indicating whether vocabulary should be stored.
            </summary>
            <value>
              <c>true</c> if vocabulary is stored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.StoreExamples">
            <summary>
            Gets or sets a value indicating whether to store Examples.
            </summary>
            <value>
              <c>true</c> if atomic patterns are to be stored; otherwise, <c>false</c>.
            </value>
            <remarks>Default value is <c>true</c>.</remarks>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.StorePatternExamples">
            <summary>
            Gets or sets a value indicating whether to store atomic patterns as examples.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.ParentBot">
            <summary>
            Gets or sets the parent bot.
            </summary>
            <value>
            The parent bot.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.HasParent">
            <summary>
            Gets a value indicating whether the bot has a parent.
            </summary>
            <value>
            <c>true</c> if this bot has a parent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.UseParentFilters">
            <summary>
            Gets or sets a value indicating whether parent's Filters are accessible.
            </summary>
            <value>
              <c>true</c> if parent's Filters can be used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.UseParentSplitters">
            <summary>
            Gets or sets a value indicating whether to use Parent's splitters.
            </summary>
            <value>
              <c>true</c> if parent splitters are to be used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.UseParentMaps">
            <summary>
            Gets or sets a value indicating whether parent's Maps accessible.
            </summary>
            <value>
              <c>true</c> if parent's Maps are accessible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.UseParentRegex">
            <summary>
            Gets or sets a value indicating whether parent's regular expressions are accessible.
            </summary>
            <value>
              <c>true</c> if parent's regular expressions are accessible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.UseParentSets">
            <summary>
            Gets or sets a value indicating whether parent's Sets are accessible.
            </summary>
            <value>
              <c>true</c> if parent's Sets are accessible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.UseParentRandoms">
            <summary>
            Gets or sets a value indicating whether parent's random collection is accessible.
            </summary>
            <value>
              <c>true</c> if parent's random collection is accessible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.UseParentPhrases">
            <summary>
            Gets or sets a value indicating whether parent's phrase collection is accessible.
            </summary>
            <value>
              <c>true</c> if parent's phrase collection is accessible.; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.UserHistoryLimit">
            <summary>
            Gets or sets the number of Chat requests and Chat results to be stored in user history.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.ModelLimit">
            <summary>
            Gets or sets the maximum number of Models that can be stored in the Bot's Master <see cref="T:Syn.Bot.Siml.Graph.GraphNode"/>
            </summary>
            <value>
            <see cref="F:System.Int32.MaxValue"/> by default.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.SetLimit">
            <summary>
            Gets or sets the maximum number of Set elements that can be stored by the Bot's <see cref="T:Syn.Bot.Siml.Collections.SetCollection"/>
            </summary>
            <value>
            <see cref="F:System.Int32.MaxValue"/> by default.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.MapLimit">
            <summary>
            Gets or sets the maximum number of Map elements that can be stored in the Bot's <see cref="T:Syn.Bot.Siml.Collections.MapCollection"/>
            </summary>
            <value>
            <see cref="F:System.Int32.MaxValue"/> by default.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.FilterLimit">
            <summary>
            Gets or sets the maximum number of Filter elements that can be stored in the Bot's <see cref="T:Syn.Bot.Siml.Collections.FilterCollection"/>
            </summary>
            <value>
            <see cref="F:System.Int32.MaxValue"/> by default.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.SplitterLimit">
            <summary>
            Gets or sets the maximum number of Splitter elements that be stored in the Bot's <see cref="T:Syn.Bot.Siml.Collections.TokenizerCollection"/>
            </summary>
            <value>
            <see cref="F:System.Int32.MaxValue"/> by default.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.RegexLimit">
            <summary>
            Gets or sets the maximum number of regular expressions that be stored in the Bot's <see cref="T:Syn.Bot.Siml.Collections.RegexCollection"/>
            </summary>
            <value>
            <see cref="F:System.Int32.MaxValue"/> by default.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.MaxUserIdleTime">
            <summary>
            Gets or sets the maximum user idle time after which the user history begins to clear up.
            </summary>
            <value>
            The maximum user idle time.
            </value>
            <remarks>The default value is 31 Days.</remarks>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.MaxBotIdleTime">
            <summary>
            Gets or sets the maximum time span after which a Bot is declared idle.
            </summary>
            <remarks>The default value is 31 Days.</remarks>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.BotTimeout">
            <summary>
            Gets or sets the maximum time span beyond which a chat request is timed out.
            </summary>
            <remarks>The default value is 1 Minute</remarks>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.Encoding">
            <summary>
            Gets or sets the encoding to be used by this Bot for textual transformations.
            </summary>
            <value>
            The encoding.
            </value>
            <remarks>The default value is UTF-8 encoding.</remarks>
        </member>
        <member name="T:Syn.Bot.Siml.BotStats">
            <summary>
            A container class used to store Bot statistics.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotStats.IdleTime">
            <summary>
            Gets a value indicating how long the Bot was Idle.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotStats.ModelCount">
            <summary>
            Total number of Models known.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotStats.ConceptCount">
            <summary>
            Total number of Concepts known.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotStats.PublicConceptCount">
            <summary>
            Total number of Public Concepts known.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotStats.PrivateConceptCount">
            <summary>
            Total number of Concept Concepts known.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotStats.Interactions">
            <summary>
            Gets the total number of Chat requests this Bot has processed.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotStats.LoadTime">
            <summary>
            Gets the time in Milliseconds taken to load the Bot Package.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotStats.FilterationTime">
            <summary>
            Gets the average filtration time in milliseconds.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotStats.MappingTime">
            <summary>
            Gets the average mapping time in milliseconds.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotStats.SplittingTime">
            <summary>
            Gets the average time taken in milliseconds to split user message into multiple sentences.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.BotStats.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Syn.Bot.Siml.Classes.Deprecated.ResultType">
            <summary>
            Provides enumerated values used to determine the type of Result.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Classes.Deprecated.ResultType.Normal">
            <summary>
            Denotes a Response that is generated after a <see cref="T:Syn.Bot.Siml.ChatRequest"/> is successfully evaluated.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Classes.Deprecated.ResultType.Timedout">
            <summary>
            Denotes a response that is generated when the <see cref="T:Syn.Bot.Siml.ChatRequest"/> is timed out.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Classes.Deprecated.ResultType.Empty">
            <summary>
            Denotes an Empty Response
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Classes.TypoGenerator.SwapChars(System.String,System.Int32)">
            <summary>
            SwapChars.
            [Flip 2 chars]
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Classes.TypoGenerator.RepeatChars(System.String,System.Int32)">
            <summary>
            RepeatChars.
            [Repeat 1 char]
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Classes.TypoGenerator.DeleteChar(System.String,System.Int32)">
            <summary>
            DeleteChar.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Classes.TypoGenerator.ChangeCharIfValue(System.String,System.Int32,System.Char,System.Char)">
            <summary>
            ChangeCharIfValue.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Interfaces.IMapItem">
            <summary>
            An interface representation of an SIML MapItem element.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Interfaces.IMapItem.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Interfaces.IMapItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.Interfaces.IMap">
            <summary>
            An interface that represents an SIML Map
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Interfaces.IMap.Name">
            <summary>
            Gets the name of the Map
            </summary>
            <value>
            The unique name of the Map.
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.Interfaces.IContextProcessor">
            <summary>
            An interface to be implemented by all compatible adapter processors.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Interfaces.IContextProcessor.ProcessInnerElements(System.Xml.Linq.XElement,Syn.Bot.Siml.Context)">
            <summary>
            Processes the inner elements of the specified <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="elementNode">The element node.</param>
            <param name="parameter">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Interfaces.IContextProcessor.ProcessAndReplaceAll(System.Xml.Linq.XElement,System.String,Syn.Bot.Siml.Context)">
            <summary>
            Processes the inner elements and replaces them with their values.
            </summary>
            <param name="elementNode">The element node.</param>
            <param name="tagName">Name of the tag.</param>
            <param name="parameter">The context.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Interfaces.IContextProcessor.SaveToGraph(System.Xml.Linq.XElement,Syn.Bot.Siml.Context,Syn.Bot.Siml.Graph.GraphNode)">
            <summary>
            Saves content to GraphNode
            </summary>
            <param name="elementNode">The element node containing the content to save. Usually the Model element.</param>
            <param name="parameter">Parameter.</param>
            <param name="graphNode">GraphNode.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Interfaces.IContextProcessor.Process(Syn.Bot.Siml.Context)">
            <summary>
            Processes the given <see cref="T:Syn.Bot.Siml.Context"/>.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Siml.Interfaces.ISet">
            <summary>
            A interface for SIML sets.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Interfaces.ISet.Name">
            <summary>
            Unique name of the Set.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Interfaces.ISet.GetValues(System.String)">
            <summary>
            All enumerable values held within this Set.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Interfaces.ISet.Contains(System.String,System.String)">
            <summary>
            Gets a value indicating if this Set contains the specified item.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Siml.Interfaces.IRegexItem.IsStrict">
            <summary>
            Gets or sets a value indicating whether this Regex takes part in normalization.
            </summary>
            <value>
              <c>true</c> if this Regex is strict; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Interfaces.ITokenizer.Type">
            <summary>
            Gets the type of this <see cref="T:Syn.Bot.Siml.Collections.Tokenizer"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Interfaces.ITokenizer.Value">
            <summary>
            Gets the splitter value.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Interfaces.ITokenizer.Tokenize(System.Collections.Generic.List{System.String})">
            <summary>
            Splits the specified source string.
            </summary>
            <param name="sourceList">The source string.</param>
            <returns>List of string split using this <see cref="T:Syn.Bot.Siml.Collections.Tokenizer"/>'s value.</returns>
        </member>
        <member name="T:Syn.Bot.Siml.Interfaces.IVolatile">
            <summary>
            Interface to be implemented by volatile classes.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Interfaces.IAdapter">
            <summary>
            The default interaface for all Tag Handlers.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Interfaces.IAdapter.IsRecursive">
            <summary>
            Gets a value indicating whether the children of this element will be processed prior to this.
            </summary>
            <value>
            <c>true</c> if this instance is recursive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Interfaces.IAdapter.TagName">
            <summary>
            Gets the name of the tag.
            </summary>
            <value>
            The name of the tag.
            </value>
        </member>
        <member name="M:Syn.Bot.Siml.Interfaces.IAdapter.Evaluate(Syn.Bot.Siml.Context)">
            <summary>
            Processes the specified <see cref="T:Syn.Bot.Siml.Context"/>.
            </summary>
            <param name="context">The <see cref="T:Syn.Bot.Siml.Context"/>.</param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Siml.Optimization.SimlOptimizer">
            <summary>
            EXPERIMENTAL //TODO: Work in Progress
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Optimization.SimlOptimizer.Status">
            <summary>
            Gets or sets the status of the Analyzer.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.Search.ISearchEngine">
            <summary>
            Interface for Search Engine mechanism.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Search.ISearchEngine.GetSearchResult(Syn.Bot.Siml.Search.SearchQuery,Syn.Bot.Siml.Search.SearchItem)">
            <summary>
            Gets the search result.
            </summary>
            <param name="searchQuery">The search query.</param>
            <param name="searchItem">The search item.</param>
        </member>
        <member name="T:Syn.Bot.Siml.Search.SearchEngine">
            <summary>
            Default implementation of <see cref="T:Syn.Bot.Siml.Search.ISearchEngine"/> interface.
            </summary>
            <seealso cref="T:Syn.Bot.Siml.Search.ISearchEngine" />
        </member>
        <member name="M:Syn.Bot.Siml.Search.SearchEngine.GetSearchResult(Syn.Bot.Siml.Search.SearchQuery,Syn.Bot.Siml.Search.SearchItem)">
            <summary>
            Gets the search result.
            </summary>
            <param name="searchQuery">The search query.</param>
            <param name="searchItem">The search item.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Search.SearchItem.#ctor(Syn.Bot.Siml.SimlBot,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Search.SearchItem"/> class.
            </summary>
            <param name="bot">The bot.</param>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchItem.Pattern">
            <summary>
            Gets the actual search pattern.
            </summary>
            <value>
            The pattern.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchItem.Tokens">
            <summary>
            Gets the <see cref="T:Syn.Bot.Siml.Search.SearchToken"/> list. 
            </summary>
            <value>
            The tokens.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchItem.IsAtomic">
            <summary>
            Gets a value indicating whether the <see cref="P:Syn.Bot.Siml.Search.SearchItem.Pattern"/> is atomic.
            </summary>
            <value>
              <c>true</c> if this <see cref="P:Syn.Bot.Siml.Search.SearchItem.Pattern"/> is atomic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.Search.SearchResult">
            <summary>
            Represents the returned value of a search result.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Search.SearchResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Search.SearchResult"/> class.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Search.SearchResult.#ctor(Syn.Bot.Siml.Search.SearchResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Search.SearchResult"/> class.
            </summary>
            <param name="searchResult">The search result.</param>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchResult.Score">
            <summary>
            Gets the search result score.
            </summary>
            <value>
            The score.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchResult.Query">
            <summary>
            Gets the query against which this search result was generated.
            </summary>
            <value>
            The query.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchResult.Value">
            <summary>
            Gets the generated value for the tokens that were processed for this search result.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchResult.InputMatchList">
            <summary>
            Gets the input match list.
            </summary>
            <value>
            The input match list.
            </value>
        </member>
        <member name="F:Syn.Bot.Siml.Search.SearchResult.Empty">
            <summary>
            Represents an empty <see cref="T:Syn.Bot.Siml.Search.SearchResult"/>. This field is read-only.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Search.SearchMode.Hard">
            <summary>
            The hard search scheme.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Search.SearchMode.Soft">
            <summary>
            The soft search scheme. This is the default search mode.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchToken.Format">
            <summary>
            Gets the normalized value after removing strip symbols.
            </summary>
            <value>
            The normalized value.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchToken.Value">
            <summary>
            Gets the value without symbols being stripped.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchToken.Type">
            <summary>
            Gets the type of search token.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchQuery.Request">
            <summary>
            Gets the <see cref="T:Syn.Bot.Siml.ChatRequest"/> for this search query.
            </summary>
            <value>
            The request.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchQuery.Query">
            <summary>
            Gets the query string.
            </summary>
            <value>
            The query.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchQuery.WordCount">
            <summary>
            Gets the number of words in <see cref="P:Syn.Bot.Siml.Search.SearchQuery.Query"/>.
            </summary>
            <value>
            The word count.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchQuery.BaseScore">
            <summary>
            Gets or sets the minimum score required for a <see cref="T:Syn.Bot.Siml.Search.SearchResult"/> to be accepted.
            </summary>
            <value>
            The minimum score.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchQuery.DisorderPenalty">
            <summary>
            Gets or sets the disorder penalty that is applied when word order is not matched.
            </summary>
            <value>
            The disorder penalty.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchQuery.MaxCount">
            <summary>
            Gets or sets the maximum number of items allowed in a <see cref="T:Syn.Bot.Siml.Search.SearchResult"/>.
            </summary>
            <value>
            The gate.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchQuery.CommonWords">
            <summary>
            Gets the common words used to process tolerance of missing words.
            </summary>
            <value>
            The common words.
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.ContextProcessor">
            <summary>
            A Processor class that processes all the adapters found in the <see cref="T:Syn.Bot.Siml.Context"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.ContextProcessor.ProcessInnerElements(System.Xml.Linq.XElement,Syn.Bot.Siml.Context)">
            <summary>
            Processes the inner elements of the specified <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="elementNode">The element node.</param>
            <param name="parameter">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.ContextProcessor.ProcessAndReplaceAll(System.Xml.Linq.XElement,System.String,Syn.Bot.Siml.Context)">
            <summary>
            Processes the inner elements and replaces them with their values.
            </summary>
            <param name="elementNode">The element node.</param>
            <param name="tagName">Name of the tag.</param>
            <param name="parameter">The context.</param>
        </member>
        <member name="M:Syn.Bot.Siml.ContextProcessor.SaveToGraph(System.Xml.Linq.XElement,Syn.Bot.Siml.Context,Syn.Bot.Siml.Graph.GraphNode)">
            <summary>
            Saves content to GraphNode
            </summary>
            <param name="elementNode">The element node containing the content to save. Usually the Model element.</param>
            <param name="parameter">Parameter.</param>
            <param name="graphNode">GraphNode.</param>
        </member>
        <member name="M:Syn.Bot.Siml.ContextProcessor.Process(Syn.Bot.Siml.Context)">
            <summary>
            Processes the given <see cref="T:Syn.Bot.Siml.Context"/>.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Siml.FilterTarget">
            <summary>
            Provides enumerated values to determine the target of filtration.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.FilterTarget.Input">
            <summary>
            Targets user input
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.FilterTarget.Output">
            <summary>
            Targets user and bot output
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.FilterTarget.Both">
            <summary>
            Targets both user input and bot output
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.PackageManager">
            <summary>
            Provides functionalities to import an SIML Package into the Bot's <see cref="T:Syn.Bot.Siml.Graph.GraphNode"/>
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.PackageManager.LoadFromString(System.String)">
            <summary>
            Loads SIML Package into the Bot's Master <see cref="T:Syn.Bot.Siml.Graph.GraphNode"/>
            </summary>
            <param name="packageString">The SIML package string.</param>
        </member>
        <member name="M:Syn.Bot.Siml.PackageManager.ConvertToPackage(System.Collections.Generic.IEnumerable{System.Xml.Linq.XDocument})">
            <summary>
            Converts a list of SIML documents to an SIML Package.
            </summary>
            <param name="simlDocuments">SIML documents.</param>
            <returns>An SIML Package as <see cref="T:System.String"/></returns>
            <remarks>This SIML Package should be stored in a file with .SimlPk extension</remarks>
        </member>
        <member name="T:Syn.Bot.Siml.RepeatManager">
            <summary>
            Represents a repeat management system.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.RepeatManager.AddRepeat(System.Xml.Linq.XElement)">
            <summary>
            Adds the repeat element to this manager.
            </summary>
            <param name="repeatElement">The repeat element.</param>
        </member>
        <member name="P:Syn.Bot.Siml.RepeatManager.IsManaged">
            <summary>
            Gets a value indicating whether a repetition mechanism exists.
            </summary>
            <value>
            <c>true</c> if a repetition mechanism exists; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syn.Bot.Siml.RepeatManager.CheckRepetition(Syn.Bot.Siml.ChatResult,Syn.Bot.Siml.ChatRequest)">
            <summary>
            Checks the repetition of non-repeatable Models.
            </summary>
            <param name="chatResult">The chat result.</param>
            <param name="chatRequest">The chat request.</param>
        </member>
        <member name="T:Syn.Bot.Siml.SimlSpecification">
            <summary>
            Represents an SIML specification.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlSpecification.Namespace">
            <summary>
            Gets a class with Properties that point to known and/or commonly used Namespaces in an SIML document.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlSpecification.Version">
            <summary>
            Gets the SIML version.
            </summary>
            <value>
            1.0
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlSpecification.EmptyDocument">
            <summary>
            Gets an empty SIML document.
            </summary>
            <value>
            An empty SIML document.
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.Performance.PerformanceWatch">
            <summary>
            Contains functionality to compare internal function performance.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.ConceptType">
            <summary>
            Provides enumerated values used to determine the type of Concept.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.ConceptType.Public">
            <summary>
            Public Concept.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.ConceptType.Private">
            <summary>
            Concept Concept.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Plugins.MathPlugin.MathParser._supportedOperators">
            <summary>
            Contains supported operators
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Plugins.MathPlugin.MathParser._supportedFunctions">
            <summary>
            Contains supported functions
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.#ctor">
            <summary>
            Initialize new instance of MathParser
            (symbol of decimal separator is read
            from regional settings in system)
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.#ctor(System.Char)">
            <summary>
            Initialize new instance of MathParser
            </summary>
            <param name="decimalSeparator">Set decimal separator</param>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.Parse(System.String,System.Boolean)">
            <summary>
            Produce result of the given math expression
            </summary>
            <param name="expression">Math expression (infix/standard notation)</param>
            <param name="isRadians"></param>
            <returns>Result</returns>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.FormatString(System.String)">
            <summary>
            Produce formatted string by the given string
            </summary>
            <param name="expression">Unformatted math expression</param>
            <returns>Formatted math expression</returns>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.ConvertToRPN(System.String)">
            <summary>
            Produce math expression in reverse polish notation
            by the given string
            </summary>
            <param name="expression">Math expression in infix notation</param>
            <returns>Math expression in postfix notation (RPN)</returns>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.LexicalAnalysisInfixNotation(System.String,System.Int32@)">
            <summary>
            Produce token by the given math expression
            </summary>
            <param name="expression">Math expression in infix notation</param>
            <param name="pos">Current position in string for lexical analysis</param>
            <returns>Token</returns>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.SyntaxAnalysisInfixNotation(System.String,System.Text.StringBuilder,System.Collections.Generic.Stack{System.String})">
            <summary>
            Syntax analysis of infix notation
            </summary>
            <param name="token">Token</param>
            <param name="outputString">Output string (math expression in RPN)</param>
            <param name="stack">Stack which contains operators (or functions)</param>
            <returns>Output string (math expression in RPN)</returns>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.Priority(System.String,System.String)">
            <summary>
            Is priority of token less (or equal) to priority of p
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.IsRightAssociated(System.String)">
            <summary>
            Is right associated operator
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.GetPriority(System.String)">
            <summary>
            Get priority of operator
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.Calculate(System.String)">
            <summary>
            Calculate expression in reverse-polish notation
            </summary>
            <param name="expression">Math expression in reverse-polish notation</param>
            <returns>Result</returns>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.LexicalAnalysisRpn(System.String,System.Int32@)">
            <summary>
            Produce token by the given math expression
            </summary>
            <param name="expression">Math expression in reverse-polish notation</param>
            <param name="pos">Current position of lexical analysis</param>
            <returns>Token</returns>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.SyntaxAnalysisRpn(System.Collections.Generic.Stack{System.Double},System.String)">
            <summary>
            Syntax analysis of reverse-polish notation
            </summary>
            <param name="stack">Stack which contains operands</param>
            <param name="token">Token</param>
            <returns>Stack which contains operands</returns>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.ApplyTrigFunction(System.Func{System.Double,System.Double},System.Double)">
            <summary>
            Apply trigonometric function
            </summary>
            <param name="func">Trigonometric function</param>
            <param name="arg">Argument</param>
            <returns>Result of function</returns>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.NumberOfArguments(System.String)">
            <summary>
            Produce number of arguments for the given operator
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.ScriptType">
            <summary>
            Provides enumerated values to represent a Script.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.ScriptType.JavaScript">
            <summary>
            Represents a JavaScript
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.ScriptType.Lua">
            <summary>
            Represents a Lua script
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.ScriptType.CSharp">
            <summary>
            Represents a C# code
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.ScriptManager">
            <summary>
            Provides functionality to interact with internal Scripting Engines.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ScriptManager.KnownScriptExtensions">
            <summary>
            Gets a list of all known script extensions.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.ScriptManager.EvaluateJavaScript(System.String)">
            <summary>
            Executes the JavaScript provided and returns the result
            </summary>
            <param name="javaScript">The JavaScript.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.ScriptManager.FindAndExecute(System.Xml.Linq.XElement)">
            <summary>
            Finds the right script engine and executes the script. Used by <see cref="T:Syn.Bot.Siml.Graph.GraphNode"/>.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.ChatRequest">
            <summary>
            Represents a Chat Request made to <see cref="T:Syn.Bot.Siml.SimlBot"/>.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatRequest.IsInternal">
            <summary>
            Gets or sets a value indicating if this request is internal. 
            If <c>true</c> this request is not considered as part of user input and is not added to <see cref="P:Syn.Bot.Siml.BotUser.Requests"/>.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatRequest.IsTask">
            <summary>
            Gets or sets a value that indicates if this request was generated by a <see cref="!:BotTask"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.ChatRequest.#ctor(System.String,Syn.Bot.Siml.BotUser)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.ChatRequest"/> class.
            </summary>
            <param name="userMessage">The user message.</param>
            <param name="botUser">The bot user.</param>
        </member>
        <member name="P:Syn.Bot.Siml.ChatRequest.UserMessage">
            <summary>
            Gets the raw user request message
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatRequest.Type">
            <summary>
            Gets the type of chat request.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatRequest.User">
            <summary>
            Gets the user associated with this chat request.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatRequest.Bot">
            <summary>
            Gets the bot to which the chat request is to be made.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatRequest.Stats">
            <summary>
            Gets the statistics of this chat request which is finally transferred to <see cref="T:Syn.Bot.Siml.ChatResult"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatRequest.TraversedNode">
            <summary>
            Gets the search graph.
            </summary>
            <value>
            The search graph.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.ChatRequest.InputList">
            <summary>
            Gets the List of Splitted Queries based on User Message.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.BotResponse">
            <summary>
            Represents a response generated after a <see cref="T:Syn.Bot.Siml.Graph.GraphNode"/> has successfully been evaluated.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.BotResponse.Clone">
            <summary>
            Creates a object Clone of this <see cref="T:Syn.Bot.Siml.BotResponse"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Siml.BotResponse.Rank">
            <summary>
            Gets the rank of this <see cref="T:Syn.Bot.Siml.BotResponse"/>
            </summary>
            <value>
            The response rank.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotResponse.Bot">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotResponse.Element">
            <summary>
            Gets the XML element that represents this response.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotResponse.Concept">
            <summary>
            Gets or sets the Concept for this Response.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotResponse.ConceptType">
            <summary>
            Gets or sets the ConceptType for this Response.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotResponse.ConceptRepeat">
            <summary>
            Gets or sets a value indicating whether the Concept is repeatable.
            </summary>
            <value>
              <c>true</c> if Concept is repeatable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotResponse.Label">
            <summary>
            Gets or sets the Label for this Response.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotResponse.HasLabel">
            <summary>
            Gets a value indicating if this Response has a Label.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotResponse.IsEmpty">
            <summary>
            Gets a value indicating if this Response is Empty.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotResponse.OutputMessage">
            <summary>
            Gets the Output Sentence for this Response.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.BotResponse.Empty">
            <summary>
            Returns an Empty Response. This field is read-only.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.BotResponse.IsEvent">
            <summary>
            Determines whether this response is generated by an event.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Siml.ChatResult">
            <summary>
            Represents a Bot message that is generated after a <see cref="T:Syn.Bot.Siml.ChatRequest"/> is made.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.Stack">
            <summary>
            Gets the stack frames for this <see cref="T:Syn.Bot.Siml.ChatResult"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.User">
            <summary>
            Gets the <see cref="T:Syn.Bot.Siml.BotUser"/> for whom the <see cref="T:Syn.Bot.Siml.ChatResult"/> was generated.
            </summary>
            <value>
            The user.
            </value>
        </member>
        <member name="M:Syn.Bot.Siml.ChatResult.ResortToTimedout">
            <summary>
            Cancels all computation and returns the pre-defined Timedout response value.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.ChatResult.ResortToEmpty">
            <summary>
            Cancels all computation and returns the pre-defined Empty response value.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.Label">
            <summary>
            Gets the last <c>Label</c> that was set for a <see cref="T:Syn.Bot.Siml.BotResponse"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.Responses">
            <summary>
            Gets or sets the responses.
            </summary>
            <value>
            The responses.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.Type">
            <summary>
            The type of Result generated.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.Success">
            <summary>
            Gets a value indicating whether this <see cref="T:Syn.Bot.Siml.ChatResult"/> has a <see cref="T:Syn.Bot.Siml.BotResponse"/>.
            </summary>
            <value>
              <c>true</c> if successful; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.Hint">
            <summary>
            Gets or sets the last hint for next user message the Bot expects.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.Stats">
            <summary>
            Gets the time taken to process the Result in Milliseconds.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.BotMessage">
            <summary>
            Gets the entire Message the Bot generated for a chat request it received.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.LastResponse">
            <summary>
            Gets the last Response added to this Result.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.ChatResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.BotEmotion">
            <summary>
            Gets the Bot emotion associated with this <see cref="T:Syn.Bot.Siml.ChatResult"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.UserEmotion">
            <summary>
            Gets the User emotion associated with this <see cref="T:Syn.Bot.Siml.ChatResult"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.TraversedNode">
            <summary>
            Gets the search graph.
            </summary>
            <value>
            The search graph.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.ReadTime">
            <summary>
            Gets the 'estimated' time in seconds required for a human to read this result.
            </summary>
            <value>
            The human read time.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.Precision">
            <summary>
            Gets the result precision in the range [0,1] based on the number precision-tokens matches.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.ChatResult.GetSuggestions">
            <summary>
            Gets suggestions for the <see cref="T:Syn.Bot.Siml.ChatRequest"/> attached to this <see cref="T:Syn.Bot.Siml.ChatResult"/>.
            </summary>
            <remarks>In case the response is generated by a <see cref="T:Syn.Bot.Siml.Search.SearchResult"/> then the value of <see cref="P:Syn.Bot.Siml.Search.SearchResult.Score"/> is returned.</remarks>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.Contract">
            <summary>
            Gets the contract object that can be easily serialized to any Data-Interchange format.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.Data">
            <summary>
            Gets or sets the <see cref="T:Syn.Bot.Siml.Collections.DataCollection"/> stored in this <see cref="T:Syn.Bot.Siml.ChatResult"/>.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.BotSettings">
            <summary>
            A Settings class derived for storing Bot related variables.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.BotSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.BotSettings"/> class.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.SuggestionFormatter">
            <summary>
            Default implementation of <see cref="T:Syn.Bot.Siml.Interfaces.ISuggestionFormatter"/> interface.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.SimlBot">
            <summary>
            Official SIML Interpreter by Synthetic Intelligence Network
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Activate(System.String,System.String,System.String)">
            <summary>
            Activates the specified license type.
            </summary>
            <param name="licenseType">Type of the license.</param>
            <param name="licensee">The licensee.</param>
            <param name="licenseKey">The license key.</param>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Version">
            <summary>
            Gets the version of the Bot Library.
            </summary>
            <value>
            The Bot Library version.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.MaxBotIdleTime">
            <summary>
            Gets the maximum idle time span after which the Bot is declared Idle.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Instance">
            <summary>
            Gets or sets the shared Main <see cref="T:Syn.Bot.Siml.SimlBot"/>. A new <see cref="T:Syn.Bot.Siml.SimlBot"/> object is initialized on 'Get' call.
            </summary>
            <value>
            The main bot.
            </value>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.#ctor">
            <summary>
            Initializes a new instance of SynBot class.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.#ctor(Syn.Bot.Siml.BotConfiguration)">
            <summary>
            Initializes a new instance of <see cref="T:Syn.Bot.Siml.SimlBot"/> class with the specified configuration.
            </summary>
            <param name="configuration">Bot Configuration.</param>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.RandomCollection">
            <summary>
            Gets the collection of Random and Phrase items.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Vocabulary">
            <summary>
            Gets all the unique tokens known to the Bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Configuration">
            <summary>
            Gets the Bot configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Parent">
            <summary>
            Get the Parent Bot
            </summary>
            <returns>The Parent Bot if it exists else returns null.</returns>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.HasParent">
            <summary>
            Determines if this Bot has a parent Bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.EmotionMLDocument">
            <summary>
            Gets the default EmotionML parser.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Emotion">
            <summary>
            Gets the current emotion for the Bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Examples">
            <summary>
            Gets a list of atomic patterns known by the bot.
            </summary>
            <value>
            Atomic Patterns.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Logger">
            <summary>
            Gets the default logger.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.MainUser">
            <summary>
            Gets the "supposedly" main user for this Bot.
            </summary>
            <value>
            Main user
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.DefaultUserSettings">
            <summary>
            Gets the default user settings.
            </summary>
            <value>
            The default user settings.
            </value>
            <remarks>
            This <see cref="P:Syn.Bot.Siml.SimlBot.Settings"/> contains the default variables that are loaded upon package load. 
            Once loaded any changes to this settings will not affect other <see cref="T:Syn.Bot.Siml.BotUser"/> settings.
            </remarks>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Settings">
            <summary>
            Gets the Settings object that contains Bot variables.
            </summary>
            <value>
            List of variables known by the Bot.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Maps">
            <summary>
            Gets the map collection.
            </summary>
            <value>
            The map collection.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Filters">
            <summary>
            Gets the filter collection.
            </summary>
            <value>
            The filter collection.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.ScriptManager">
            <summary>
            Gets the Script Manager.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Timer">
            <summary>
            Gets the default Timer for <see cref="T:Syn.Bot.Siml.LateTask"/> execution.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Tokenizers">
            <summary>
            Gets the Splitter Collection.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.GraphMaster">
            <summary>
            Gets the master Graph Node.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Parsers">
            <summary>
            Gets the parsers.
            </summary>
            <value>
            The parsers.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.SearchEngine">
            <summary>
            Gets or sets the search engine for processing examples.
            </summary>
            <value>
            The search engine.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Adapters">
            <summary>
            Gets the tag handlers.
            </summary>
            <value>
            The tag handlers.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.RegularExpressions">
            <summary>
            Gets the regex collection.
            </summary>
            <value>
            The regex collection.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Sets">
            <summary>
            Gets the set collection.
            </summary>
            <value>
            The set collection.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Interactions">
            <summary>
            Gets the interactions made by all bot users.
            </summary>
            <value>
            The interactions.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.RepeatManager">
            <summary>
            Gets the repeat manager.
            </summary>
            <value>
            The repeat manager.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Time">
            <summary>
            Gets the UTC offset based <see cref="T:System.DateTime"/> value.
            </summary>
            <value>
            UTC offset based <see cref="T:System.DateTime"/> value.
            </value>
            <remarks>if the <code>UTC</code> offset value is not set in bot settings then returns <see cref="P:System.DateTime.Now"/>.</remarks>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Culture">
            <summary>
            Gets the <see cref="T:System.Globalization.CultureInfo"/> under which the Bot is currently operating.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Stats">
            <summary>
            Gets Bot stats.
            </summary>
            <value>
            BotStats
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Timeout">
            <summary>
            Gets the time span after which a chat request is timed out
            </summary>
            <value>
            Timeout
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Users">
            <summary>
            Gets all known <see cref="T:Syn.Bot.Siml.BotUser"/>s.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.CacheManager">
            <summary>
            Gets the cache manager.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Encoding">
            <summary>
            Gets the encoding used by the Bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.IsIdle">
            <summary>
            Gets a value indicating if this bot has exceeded its maximum allowed idle time.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.ID">
            <summary>
            Gets the Unique ID assigned to this Bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.ContextProcessor">
            <summary>
            Gets the context processor.
            </summary>
            <value>
            The context processor.
            </value>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.CreateUser">
            <summary>
            Creates a new <see cref="T:Syn.Bot.Siml.BotUser"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.CreateUser(System.String)">
            <summary>
            Creates User with the specified ID.
            </summary>
            <param name="userId">Unique Identifier.</param>
            <remarks>If a user with the specified id already exists then the existing user is returned.</remarks>>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.PackageManager">
            <summary>
            Loads SIML Package from String.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.AddSiml(System.String)">
            <summary>
            Loads SIML from string preserving all whitespace.
            </summary>
            <param name="simlString">SIML String.</param>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.AddSiml(System.Xml.Linq.XDocument,Syn.Bot.Siml.BotUser)">
            <summary>
            Adds the SIML document to the user's mini graph.
            </summary>
            <param name="simlDocument">The SIML document.</param>
            <param name="user">The Bot user.</param>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.AddSiml(System.Collections.Generic.IEnumerable{System.Xml.Linq.XDocument})">
            <summary>
            Adds SIML documents to Bot Knowledge-Base after proper sequencing.
            </summary>
            <param name="simlDocuments">SIML Elements</param>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.AddSiml(System.Xml.Linq.XDocument)">
            <summary>
            Adds the SIML document to bot.
            </summary>
            <param name="simlDocument">The SIML document.</param>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.AddSiml(System.Xml.Linq.XElement)">
            <summary>
            Scans and adds the elements within the root SIML element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Trigger(System.String)">
            <summary>
            Triggers the specified event.
            </summary>
            <param name="eventMessage">The event message.</param>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Trigger(System.String,Syn.Bot.Siml.BotUser)">
            <summary>
            Triggers the specified event message.
            </summary>
            <param name="eventMessage">The event message.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Raise(System.String)">
            <summary>
            Raises the specified event for the <see cref="P:Syn.Bot.Siml.SimlBot.MainUser"/>.
            </summary>
            <param name="eventName">The event name.</param>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Raise(System.String,Syn.Bot.Siml.BotUser)">
            <summary>
            Raises the specified event for the specified <see cref="T:Syn.Bot.Siml.BotUser"/>.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Chat(System.String)">
            <summary>
            Chat
            </summary>
            <param name="userMessage">user Message</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Chat(System.String,Syn.Bot.Siml.BotUser)">
            <summary>
            Sends the message as user chat request.
            </summary>
            <param name="userMessage">The user message.</param>
            <param name="botUser">The <see cref="T:Syn.Bot.Siml.BotUser"/> that is making this chat request.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Chat(Syn.Bot.Siml.ChatRequest)">
            <summary>
            Sends the specified chat request.
            </summary>
            <param name="chatRequest">The chat request.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Chat``1(System.String)">
            <summary>
            EXPERIMENTAL: Starts a chat request and returnes the last evaluated contextual Data of the specified type.
            </summary>
            <param name="userMessage"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Release">
            <summary>
            Releases and clears all resources used by this Bot. This function is to be used if the Bot has a Parent.
            </summary>
        </member>
        <member name="E:Syn.Bot.Siml.SimlBot.Learning">
            <summary>
            Occurs when the Bot learns a new Model.
            </summary>
        </member>
        <member name="E:Syn.Bot.Siml.SimlBot.Memorizing">
            <summary>
            Occurs when the Bot memorizes a new Model for a specific user.
            </summary>
        </member>
        <member name="E:Syn.Bot.Siml.SimlBot.EmotionChanged">
            <summary>
            Occurs when the emotion of the Bot changes.
            </summary>
        </member>
        <member name="E:Syn.Bot.Siml.SimlBot.Suggesting">
            <summary>
            Occurs when the Bot is suggesting example inputs from <see cref="P:Syn.Bot.Siml.SimlBot.Examples"/>.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Context">
            <summary>
            A Contextual collection of all the items that represent the current SIML node being processed.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.StackFrame">
            <summary>
            Container class for Stack information.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.StackFrame.Concept">
            <summary>
            Gets the SIML Concept name.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.StackFrame.Trigger">
            <summary>
            Gets the SIML Pattern that triggered this <see cref="T:Syn.Bot.Siml.BotResponse"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.StackFrame.Siml">
            <summary>
            Gets the SIML code.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.StackFrame.Previous">
            <summary>
            Gets the value of the <c>Previous</c> element.
            </summary>
            <value>
            Previous element's value.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.StackFrame.Label">
            <summary>
            Gets the value of the <c>Label</c> associated with this <see cref="T:Syn.Bot.Siml.BotResponse"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.StackFrame.Output">
            <summary>
            Gets the Bot output.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.BotUser">
            <summary>
            Represents an entity that interacts with <see cref="T:Syn.Bot.Siml.SimlBot"/>
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.BotUser.#ctor(Syn.Bot.Siml.SimlBot,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.BotUser"/> class.
            </summary>
            <param name="bot">The bot.</param>
            <param name="userId">The user identifier.</param>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.IsMain">
            <summary>
            Gets a value indicating whether this instance is <see cref="P:Syn.Bot.Siml.SimlBot.MainUser" />.
            </summary>
            <value>
            <c>true</c> if this instance is <see cref="P:Syn.Bot.Siml.SimlBot.MainUser" />; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.Vars">
            <summary>
            Gets the variables that are stored temporarily during a chat session.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.IsIdle">
            <summary>
            Gets a value indicating whether this user is idle.
            </summary>
            <value>
              <c>true</c> if this user is idle; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.IdleTime">
            <summary>
            Gets the idle time for the user.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.Bot">
            <summary>
            Gets the bot associated with this user.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.HasHistory">
            <summary>
            Gets a value indicating whether this user has a chat history.
            </summary>
            <value>
            <c>true</c> if this user has a chat history; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.Results">
            <summary>
            Gets the previous results stored.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.Requests">
            <summary>
            Gets a list of <see cref="T:Syn.Bot.Siml.ChatRequest"/>s made by this user.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.Emotion">
            <summary>
            Gets or sets the emotional state for the user.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.LastChatResult">
            <summary>
            Gets the last chat result.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.LastChatRequest">
            <summary>
            Gets the last chat request.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.BotUser.Equals(System.Object)">
            <summary>
            Returns a value that determines if the specified object is equal to this BotUser object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.Settings">
            <summary>
            Gets the settings that contains user related variables.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.MiniGraph">
            <summary>
            Gets the mini graph used to store user related Models.
            </summary>
        </member>
        <member name="E:Syn.Bot.Siml.BotUser.EmotionChanged">
            <summary>
            Occurs when the emotion is this user changes.
            </summary>
        </member>
        <member name="E:Syn.Bot.Siml.BotUser.ResponseReceived">
            <summary>
            Occurs when an automated or timed response is generated by the Graph Processor.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.UserSettings">
            <summary>
            A Settings class for SynUser.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.UserSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.UserSettings"/> class.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.VariableNames.UserMessage">
            Variable where the current user message from chat request is saved.
        </member>
        <member name="T:Syn.Bot.Siml.VarSettings">
            <summary>
            Represents an arbitrary container for temporary variables.
            </summary>
        </member>
        <member name="T:Syn.Bot.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Syn.Bot.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Syn.Bot.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
